// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: horos.proto

#include "horos.pb.h"
#include "horos.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pyosirix {

static const char* Horos_method_names[] = {
  "/pyosirix.Horos/GetCurrentVersion",
  "/pyosirix.Horos/GetCurrentImageData",
  "/pyosirix.Horos/GetCurrentImage",
  "/pyosirix.Horos/SetCurrentImage",
  "/pyosirix.Horos/GetROIsAsList",
  "/pyosirix.Horos/GetROIsAsImage",
  "/pyosirix.Horos/SetROIOpacity",
  "/pyosirix.Horos/SetROIMoveAll",
  "/pyosirix.Horos/SetROIMoveSelected",
  "/pyosirix.Horos/GetMethods",
};

std::unique_ptr< Horos::Stub> Horos::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Horos::Stub> stub(new Horos::Stub(channel, options));
  return stub;
}

Horos::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCurrentVersion_(Horos_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentImageData_(Horos_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentImage_(Horos_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentImage_(Horos_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetROIsAsList_(Horos_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetROIsAsImage_(Horos_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetROIOpacity_(Horos_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetROIMoveAll_(Horos_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetROIMoveSelected_(Horos_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMethods_(Horos_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Horos::Stub::GetCurrentVersion(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::pyosirix::DicomDataRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentVersion_, context, request, response);
}

void Horos::Stub::async::GetCurrentVersion(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentVersion_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetCurrentVersion(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::DicomDataRequest>* Horos::Stub::PrepareAsyncGetCurrentVersionRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::DicomDataRequest>* Horos::Stub::AsyncGetCurrentVersionRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetCurrentImageData(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::pyosirix::DicomDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentImageData_, context, request, response);
}

void Horos::Stub::async::GetCurrentImageData(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImageData_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetCurrentImageData(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImageData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::DicomDataResponse>* Horos::Stub::PrepareAsyncGetCurrentImageDataRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::DicomDataResponse, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentImageData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::DicomDataResponse>* Horos::Stub::AsyncGetCurrentImageDataRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentImageDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageGetRequest& request, ::pyosirix::ImageGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ImageGetRequest, ::pyosirix::ImageGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentImage_, context, request, response);
}

void Horos::Stub::async::GetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageGetRequest* request, ::pyosirix::ImageGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ImageGetRequest, ::pyosirix::ImageGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImage_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageGetRequest* request, ::pyosirix::ImageGetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ImageGetResponse>* Horos::Stub::PrepareAsyncGetCurrentImageRaw(::grpc::ClientContext* context, const ::pyosirix::ImageGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::ImageGetResponse, ::pyosirix::ImageGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ImageGetResponse>* Horos::Stub::AsyncGetCurrentImageRaw(::grpc::ClientContext* context, const ::pyosirix::ImageGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::SetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageSetRequest& request, ::pyosirix::ImageSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ImageSetRequest, ::pyosirix::ImageSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentImage_, context, request, response);
}

void Horos::Stub::async::SetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageSetRequest* request, ::pyosirix::ImageSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ImageSetRequest, ::pyosirix::ImageSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentImage_, context, request, response, std::move(f));
}

void Horos::Stub::async::SetCurrentImage(::grpc::ClientContext* context, const ::pyosirix::ImageSetRequest* request, ::pyosirix::ImageSetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ImageSetResponse>* Horos::Stub::PrepareAsyncSetCurrentImageRaw(::grpc::ClientContext* context, const ::pyosirix::ImageSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::ImageSetResponse, ::pyosirix::ImageSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ImageSetResponse>* Horos::Stub::AsyncSetCurrentImageRaw(::grpc::ClientContext* context, const ::pyosirix::ImageSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetROIsAsList(::grpc::ClientContext* context, const ::pyosirix::ROIListRequest& request, ::pyosirix::ROIListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ROIListRequest, ::pyosirix::ROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetROIsAsList_, context, request, response);
}

void Horos::Stub::async::GetROIsAsList(::grpc::ClientContext* context, const ::pyosirix::ROIListRequest* request, ::pyosirix::ROIListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ROIListRequest, ::pyosirix::ROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetROIsAsList_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetROIsAsList(::grpc::ClientContext* context, const ::pyosirix::ROIListRequest* request, ::pyosirix::ROIListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetROIsAsList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ROIListResponse>* Horos::Stub::PrepareAsyncGetROIsAsListRaw(::grpc::ClientContext* context, const ::pyosirix::ROIListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::ROIListResponse, ::pyosirix::ROIListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetROIsAsList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ROIListResponse>* Horos::Stub::AsyncGetROIsAsListRaw(::grpc::ClientContext* context, const ::pyosirix::ROIListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetROIsAsListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetROIsAsImage(::grpc::ClientContext* context, const ::pyosirix::ROIImageRequest& request, ::pyosirix::ROIImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ROIImageRequest, ::pyosirix::ROIImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetROIsAsImage_, context, request, response);
}

void Horos::Stub::async::GetROIsAsImage(::grpc::ClientContext* context, const ::pyosirix::ROIImageRequest* request, ::pyosirix::ROIImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ROIImageRequest, ::pyosirix::ROIImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetROIsAsImage_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetROIsAsImage(::grpc::ClientContext* context, const ::pyosirix::ROIImageRequest* request, ::pyosirix::ROIImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetROIsAsImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ROIImageResponse>* Horos::Stub::PrepareAsyncGetROIsAsImageRaw(::grpc::ClientContext* context, const ::pyosirix::ROIImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::ROIImageResponse, ::pyosirix::ROIImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetROIsAsImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::ROIImageResponse>* Horos::Stub::AsyncGetROIsAsImageRaw(::grpc::ClientContext* context, const ::pyosirix::ROIImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetROIsAsImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::SetROIOpacity(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::pyosirix::NullResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetROIOpacity_, context, request, response);
}

void Horos::Stub::async::SetROIOpacity(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIOpacity_, context, request, response, std::move(f));
}

void Horos::Stub::async::SetROIOpacity(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIOpacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::PrepareAsyncSetROIOpacityRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::NullResponse, ::pyosirix::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetROIOpacity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::AsyncSetROIOpacityRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetROIOpacityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::SetROIMoveAll(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::pyosirix::NullResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetROIMoveAll_, context, request, response);
}

void Horos::Stub::async::SetROIMoveAll(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIMoveAll_, context, request, response, std::move(f));
}

void Horos::Stub::async::SetROIMoveAll(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIMoveAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::PrepareAsyncSetROIMoveAllRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::NullResponse, ::pyosirix::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetROIMoveAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::AsyncSetROIMoveAllRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetROIMoveAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::SetROIMoveSelected(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::pyosirix::NullResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetROIMoveSelected_, context, request, response);
}

void Horos::Stub::async::SetROIMoveSelected(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIMoveSelected_, context, request, response, std::move(f));
}

void Horos::Stub::async::SetROIMoveSelected(::grpc::ClientContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetROIMoveSelected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::PrepareAsyncSetROIMoveSelectedRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::NullResponse, ::pyosirix::ROI, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetROIMoveSelected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::NullResponse>* Horos::Stub::AsyncSetROIMoveSelectedRaw(::grpc::ClientContext* context, const ::pyosirix::ROI& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetROIMoveSelectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetMethods(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::pyosirix::MethodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::MethodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMethods_, context, request, response);
}

void Horos::Stub::async::GetMethods(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::MethodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pyosirix::DicomDataRequest, ::pyosirix::MethodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMethods_, context, request, response, std::move(f));
}

void Horos::Stub::async::GetMethods(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::MethodResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMethods_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::MethodResponse>* Horos::Stub::PrepareAsyncGetMethodsRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pyosirix::MethodResponse, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMethods_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pyosirix::MethodResponse>* Horos::Stub::AsyncGetMethodsRaw(::grpc::ClientContext* context, const ::pyosirix::DicomDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMethodsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Horos::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::DicomDataRequest* req,
             ::pyosirix::DicomDataRequest* resp) {
               return service->GetCurrentVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::DicomDataRequest, ::pyosirix::DicomDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::DicomDataRequest* req,
             ::pyosirix::DicomDataResponse* resp) {
               return service->GetCurrentImageData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ImageGetRequest, ::pyosirix::ImageGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ImageGetRequest* req,
             ::pyosirix::ImageGetResponse* resp) {
               return service->GetCurrentImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ImageSetRequest, ::pyosirix::ImageSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ImageSetRequest* req,
             ::pyosirix::ImageSetResponse* resp) {
               return service->SetCurrentImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ROIListRequest, ::pyosirix::ROIListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ROIListRequest* req,
             ::pyosirix::ROIListResponse* resp) {
               return service->GetROIsAsList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ROIImageRequest, ::pyosirix::ROIImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ROIImageRequest* req,
             ::pyosirix::ROIImageResponse* resp) {
               return service->GetROIsAsImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ROI* req,
             ::pyosirix::NullResponse* resp) {
               return service->SetROIOpacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ROI* req,
             ::pyosirix::NullResponse* resp) {
               return service->SetROIMoveAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::ROI, ::pyosirix::NullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::ROI* req,
             ::pyosirix::NullResponse* resp) {
               return service->SetROIMoveSelected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::pyosirix::DicomDataRequest, ::pyosirix::MethodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pyosirix::DicomDataRequest* req,
             ::pyosirix::MethodResponse* resp) {
               return service->GetMethods(ctx, req, resp);
             }, this)));
}

Horos::Service::~Service() {
}

::grpc::Status Horos::Service::GetCurrentVersion(::grpc::ServerContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetCurrentImageData(::grpc::ServerContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::DicomDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetCurrentImage(::grpc::ServerContext* context, const ::pyosirix::ImageGetRequest* request, ::pyosirix::ImageGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::SetCurrentImage(::grpc::ServerContext* context, const ::pyosirix::ImageSetRequest* request, ::pyosirix::ImageSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetROIsAsList(::grpc::ServerContext* context, const ::pyosirix::ROIListRequest* request, ::pyosirix::ROIListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetROIsAsImage(::grpc::ServerContext* context, const ::pyosirix::ROIImageRequest* request, ::pyosirix::ROIImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::SetROIOpacity(::grpc::ServerContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::SetROIMoveAll(::grpc::ServerContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::SetROIMoveSelected(::grpc::ServerContext* context, const ::pyosirix::ROI* request, ::pyosirix::NullResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetMethods(::grpc::ServerContext* context, const ::pyosirix::DicomDataRequest* request, ::pyosirix::MethodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pyosirix

