// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: horos.proto

#include "horos.pb.h"
#include "horos.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace icr {

static const char* Horos_method_names[] = {
  "/icr.Horos/GetCurrentImageFile",
  "/icr.Horos/GetCurrentImage",
};

std::unique_ptr< Horos::Stub> Horos::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Horos::Stub> stub(new Horos::Stub(channel));
  return stub;
}

Horos::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCurrentImageFile_(Horos_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentImage_(Horos_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Horos::Stub::GetCurrentImageFile(::grpc::ClientContext* context, const ::icr::DicomNameRequest& request, ::icr::DicomNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrentImageFile_, context, request, response);
}

void Horos::Stub::experimental_async::GetCurrentImageFile(::grpc::ClientContext* context, const ::icr::DicomNameRequest* request, ::icr::DicomNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImageFile_, context, request, response, std::move(f));
}

void Horos::Stub::experimental_async::GetCurrentImageFile(::grpc::ClientContext* context, const ::icr::DicomNameRequest* request, ::icr::DicomNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImageFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::icr::DicomNameResponse>* Horos::Stub::PrepareAsyncGetCurrentImageFileRaw(::grpc::ClientContext* context, const ::icr::DicomNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::icr::DicomNameResponse>::Create(channel_.get(), cq, rpcmethod_GetCurrentImageFile_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::icr::DicomNameResponse>* Horos::Stub::AsyncGetCurrentImageFileRaw(::grpc::ClientContext* context, const ::icr::DicomNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentImageFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Horos::Stub::GetCurrentImage(::grpc::ClientContext* context, const ::icr::DicomImageRequest& request, ::icr::DicomImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrentImage_, context, request, response);
}

void Horos::Stub::experimental_async::GetCurrentImage(::grpc::ClientContext* context, const ::icr::DicomImageRequest* request, ::icr::DicomImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImage_, context, request, response, std::move(f));
}

void Horos::Stub::experimental_async::GetCurrentImage(::grpc::ClientContext* context, const ::icr::DicomImageRequest* request, ::icr::DicomImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrentImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::icr::DicomImageResponse>* Horos::Stub::PrepareAsyncGetCurrentImageRaw(::grpc::ClientContext* context, const ::icr::DicomImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::icr::DicomImageResponse>::Create(channel_.get(), cq, rpcmethod_GetCurrentImage_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::icr::DicomImageResponse>* Horos::Stub::AsyncGetCurrentImageRaw(::grpc::ClientContext* context, const ::icr::DicomImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

Horos::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::icr::DicomNameRequest, ::icr::DicomNameResponse>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::icr::DicomNameRequest* req,
             ::icr::DicomNameResponse* resp) {
               return service->GetCurrentImageFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Horos_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Horos::Service, ::icr::DicomImageRequest, ::icr::DicomImageResponse>(
          [](Horos::Service* service,
             ::grpc::ServerContext* ctx,
             const ::icr::DicomImageRequest* req,
             ::icr::DicomImageResponse* resp) {
               return service->GetCurrentImage(ctx, req, resp);
             }, this)));
}

Horos::Service::~Service() {
}

::grpc::Status Horos::Service::GetCurrentImageFile(::grpc::ServerContext* context, const ::icr::DicomNameRequest* request, ::icr::DicomNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Horos::Service::GetCurrentImage(::grpc::ServerContext* context, const ::icr::DicomImageRequest* request, ::icr::DicomImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace icr

