// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: horos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_horos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_horos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_horos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_horos_2eproto;
namespace icr {
class DicomNameRequest;
class DicomNameRequestDefaultTypeInternal;
extern DicomNameRequestDefaultTypeInternal _DicomNameRequest_default_instance_;
class DicomNameResponse;
class DicomNameResponseDefaultTypeInternal;
extern DicomNameResponseDefaultTypeInternal _DicomNameResponse_default_instance_;
class ImageGetRequest;
class ImageGetRequestDefaultTypeInternal;
extern ImageGetRequestDefaultTypeInternal _ImageGetRequest_default_instance_;
class ImageGetResponse;
class ImageGetResponseDefaultTypeInternal;
extern ImageGetResponseDefaultTypeInternal _ImageGetResponse_default_instance_;
class ImageSetRequest;
class ImageSetRequestDefaultTypeInternal;
extern ImageSetRequestDefaultTypeInternal _ImageSetRequest_default_instance_;
class ImageSetResponse;
class ImageSetResponseDefaultTypeInternal;
extern ImageSetResponseDefaultTypeInternal _ImageSetResponse_default_instance_;
}  // namespace icr
PROTOBUF_NAMESPACE_OPEN
template<> ::icr::DicomNameRequest* Arena::CreateMaybeMessage<::icr::DicomNameRequest>(Arena*);
template<> ::icr::DicomNameResponse* Arena::CreateMaybeMessage<::icr::DicomNameResponse>(Arena*);
template<> ::icr::ImageGetRequest* Arena::CreateMaybeMessage<::icr::ImageGetRequest>(Arena*);
template<> ::icr::ImageGetResponse* Arena::CreateMaybeMessage<::icr::ImageGetResponse>(Arena*);
template<> ::icr::ImageSetRequest* Arena::CreateMaybeMessage<::icr::ImageSetRequest>(Arena*);
template<> ::icr::ImageSetResponse* Arena::CreateMaybeMessage<::icr::ImageSetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icr {

// ===================================================================

class DicomNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomNameRequest) */ {
 public:
  inline DicomNameRequest() : DicomNameRequest(nullptr) {}
  virtual ~DicomNameRequest();

  DicomNameRequest(const DicomNameRequest& from);
  DicomNameRequest(DicomNameRequest&& from) noexcept
    : DicomNameRequest() {
    *this = ::std::move(from);
  }

  inline DicomNameRequest& operator=(const DicomNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomNameRequest& operator=(DicomNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomNameRequest* internal_default_instance() {
    return reinterpret_cast<const DicomNameRequest*>(
               &_DicomNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DicomNameRequest& a, DicomNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomNameRequest* New() const final {
    return CreateMaybeMessage<DicomNameRequest>(nullptr);
  }

  DicomNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomNameRequest& from);
  void MergeFrom(const DicomNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomNameRequest";
  }
  protected:
  explicit DicomNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class DicomNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomNameResponse) */ {
 public:
  inline DicomNameResponse() : DicomNameResponse(nullptr) {}
  virtual ~DicomNameResponse();

  DicomNameResponse(const DicomNameResponse& from);
  DicomNameResponse(DicomNameResponse&& from) noexcept
    : DicomNameResponse() {
    *this = ::std::move(from);
  }

  inline DicomNameResponse& operator=(const DicomNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomNameResponse& operator=(DicomNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomNameResponse* internal_default_instance() {
    return reinterpret_cast<const DicomNameResponse*>(
               &_DicomNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DicomNameResponse& a, DicomNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomNameResponse* New() const final {
    return CreateMaybeMessage<DicomNameResponse>(nullptr);
  }

  DicomNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomNameResponse& from);
  void MergeFrom(const DicomNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomNameResponse";
  }
  protected:
  explicit DicomNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.ImageGetRequest) */ {
 public:
  inline ImageGetRequest() : ImageGetRequest(nullptr) {}
  virtual ~ImageGetRequest();

  ImageGetRequest(const ImageGetRequest& from);
  ImageGetRequest(ImageGetRequest&& from) noexcept
    : ImageGetRequest() {
    *this = ::std::move(from);
  }

  inline ImageGetRequest& operator=(const ImageGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageGetRequest& operator=(ImageGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageGetRequest* internal_default_instance() {
    return reinterpret_cast<const ImageGetRequest*>(
               &_ImageGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageGetRequest& a, ImageGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageGetRequest* New() const final {
    return CreateMaybeMessage<ImageGetRequest>(nullptr);
  }

  ImageGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageGetRequest& from);
  void MergeFrom(const ImageGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.ImageGetRequest";
  }
  protected:
  explicit ImageGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.ImageGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.ImageGetResponse) */ {
 public:
  inline ImageGetResponse() : ImageGetResponse(nullptr) {}
  virtual ~ImageGetResponse();

  ImageGetResponse(const ImageGetResponse& from);
  ImageGetResponse(ImageGetResponse&& from) noexcept
    : ImageGetResponse() {
    *this = ::std::move(from);
  }

  inline ImageGetResponse& operator=(const ImageGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageGetResponse& operator=(ImageGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageGetResponse* internal_default_instance() {
    return reinterpret_cast<const ImageGetResponse*>(
               &_ImageGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageGetResponse& a, ImageGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageGetResponse* New() const final {
    return CreateMaybeMessage<ImageGetResponse>(nullptr);
  }

  ImageGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageGetResponse& from);
  void MergeFrom(const ImageGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.ImageGetResponse";
  }
  protected:
  explicit ImageGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 2,
    kVoxelSizeFieldNumber = 3,
    kOriginFieldNumber = 4,
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated int32 image_size = 2;
  int image_size_size() const;
  private:
  int _internal_image_size_size() const;
  public:
  void clear_image_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_size() const;
  void _internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_size(int index) const;
  void set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_size();

  // repeated float voxel_size = 3;
  int voxel_size_size() const;
  private:
  int _internal_voxel_size_size() const;
  public:
  void clear_voxel_size();
  private:
  float _internal_voxel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voxel_size() const;
  void _internal_add_voxel_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voxel_size();
  public:
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float origin = 4;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // repeated float data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.ImageGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_size_;
  mutable std::atomic<int> _image_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  mutable std::atomic<int> _voxel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  mutable std::atomic<int> _origin_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.ImageSetRequest) */ {
 public:
  inline ImageSetRequest() : ImageSetRequest(nullptr) {}
  virtual ~ImageSetRequest();

  ImageSetRequest(const ImageSetRequest& from);
  ImageSetRequest(ImageSetRequest&& from) noexcept
    : ImageSetRequest() {
    *this = ::std::move(from);
  }

  inline ImageSetRequest& operator=(const ImageSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSetRequest& operator=(ImageSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSetRequest* internal_default_instance() {
    return reinterpret_cast<const ImageSetRequest*>(
               &_ImageSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageSetRequest& a, ImageSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSetRequest* New() const final {
    return CreateMaybeMessage<ImageSetRequest>(nullptr);
  }

  ImageSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSetRequest& from);
  void MergeFrom(const ImageSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.ImageSetRequest";
  }
  protected:
  explicit ImageSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 2,
    kVoxelSizeFieldNumber = 3,
    kOriginFieldNumber = 4,
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated int32 image_size = 2;
  int image_size_size() const;
  private:
  int _internal_image_size_size() const;
  public:
  void clear_image_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_size() const;
  void _internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_size(int index) const;
  void set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_size();

  // repeated float voxel_size = 3;
  int voxel_size_size() const;
  private:
  int _internal_voxel_size_size() const;
  public:
  void clear_voxel_size();
  private:
  float _internal_voxel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voxel_size() const;
  void _internal_add_voxel_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voxel_size();
  public:
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float origin = 4;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // repeated float data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.ImageSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_size_;
  mutable std::atomic<int> _image_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  mutable std::atomic<int> _voxel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  mutable std::atomic<int> _origin_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageSetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.ImageSetResponse) */ {
 public:
  inline ImageSetResponse() : ImageSetResponse(nullptr) {}
  virtual ~ImageSetResponse();

  ImageSetResponse(const ImageSetResponse& from);
  ImageSetResponse(ImageSetResponse&& from) noexcept
    : ImageSetResponse() {
    *this = ::std::move(from);
  }

  inline ImageSetResponse& operator=(const ImageSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSetResponse& operator=(ImageSetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSetResponse* internal_default_instance() {
    return reinterpret_cast<const ImageSetResponse*>(
               &_ImageSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageSetResponse& a, ImageSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSetResponse* New() const final {
    return CreateMaybeMessage<ImageSetResponse>(nullptr);
  }

  ImageSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSetResponse& from);
  void MergeFrom(const ImageSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.ImageSetResponse";
  }
  protected:
  explicit ImageSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.ImageSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DicomNameRequest

// string id = 1;
inline void DicomNameRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomNameRequest::id() const {
  // @@protoc_insertion_point(field_get:icr.DicomNameRequest.id)
  return _internal_id();
}
inline void DicomNameRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.DicomNameRequest.id)
}
inline std::string* DicomNameRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.DicomNameRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DicomNameRequest::_internal_id() const {
  return id_.Get();
}
inline void DicomNameRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomNameRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomNameRequest.id)
}
inline void DicomNameRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomNameRequest.id)
}
inline void DicomNameRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomNameRequest.id)
}
inline std::string* DicomNameRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomNameRequest::release_id() {
  // @@protoc_insertion_point(field_release:icr.DicomNameRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomNameRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomNameRequest.id)
}

// -------------------------------------------------------------------

// DicomNameResponse

// string id = 1;
inline void DicomNameResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomNameResponse::id() const {
  // @@protoc_insertion_point(field_get:icr.DicomNameResponse.id)
  return _internal_id();
}
inline void DicomNameResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.DicomNameResponse.id)
}
inline std::string* DicomNameResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.DicomNameResponse.id)
  return _internal_mutable_id();
}
inline const std::string& DicomNameResponse::_internal_id() const {
  return id_.Get();
}
inline void DicomNameResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomNameResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomNameResponse.id)
}
inline void DicomNameResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomNameResponse.id)
}
inline void DicomNameResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomNameResponse.id)
}
inline std::string* DicomNameResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomNameResponse::release_id() {
  // @@protoc_insertion_point(field_release:icr.DicomNameResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomNameResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomNameResponse.id)
}

// -------------------------------------------------------------------

// ImageGetRequest

// string id = 1;
inline void ImageGetRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageGetRequest::id() const {
  // @@protoc_insertion_point(field_get:icr.ImageGetRequest.id)
  return _internal_id();
}
inline void ImageGetRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.ImageGetRequest.id)
}
inline std::string* ImageGetRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.ImageGetRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ImageGetRequest::_internal_id() const {
  return id_.Get();
}
inline void ImageGetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageGetRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.ImageGetRequest.id)
}
inline void ImageGetRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.ImageGetRequest.id)
}
inline void ImageGetRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.ImageGetRequest.id)
}
inline std::string* ImageGetRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:icr.ImageGetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageGetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.ImageGetRequest.id)
}

// -------------------------------------------------------------------

// ImageGetResponse

// string id = 1;
inline void ImageGetResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageGetResponse::id() const {
  // @@protoc_insertion_point(field_get:icr.ImageGetResponse.id)
  return _internal_id();
}
inline void ImageGetResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.ImageGetResponse.id)
}
inline std::string* ImageGetResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.ImageGetResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ImageGetResponse::_internal_id() const {
  return id_.Get();
}
inline void ImageGetResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageGetResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.ImageGetResponse.id)
}
inline void ImageGetResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.ImageGetResponse.id)
}
inline void ImageGetResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.ImageGetResponse.id)
}
inline std::string* ImageGetResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageGetResponse::release_id() {
  // @@protoc_insertion_point(field_release:icr.ImageGetResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageGetResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.ImageGetResponse.id)
}

// repeated int32 image_size = 2;
inline int ImageGetResponse::_internal_image_size_size() const {
  return image_size_.size();
}
inline int ImageGetResponse::image_size_size() const {
  return _internal_image_size_size();
}
inline void ImageGetResponse::clear_image_size() {
  image_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageGetResponse::_internal_image_size(int index) const {
  return image_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageGetResponse::image_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageGetResponse.image_size)
  return _internal_image_size(index);
}
inline void ImageGetResponse::set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageGetResponse.image_size)
}
inline void ImageGetResponse::_internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Add(value);
}
inline void ImageGetResponse::add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_size(value);
  // @@protoc_insertion_point(field_add:icr.ImageGetResponse.image_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageGetResponse::_internal_image_size() const {
  return image_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageGetResponse::image_size() const {
  // @@protoc_insertion_point(field_list:icr.ImageGetResponse.image_size)
  return _internal_image_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageGetResponse::_internal_mutable_image_size() {
  return &image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageGetResponse::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageGetResponse.image_size)
  return _internal_mutable_image_size();
}

// repeated float voxel_size = 3;
inline int ImageGetResponse::_internal_voxel_size_size() const {
  return voxel_size_.size();
}
inline int ImageGetResponse::voxel_size_size() const {
  return _internal_voxel_size_size();
}
inline void ImageGetResponse::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float ImageGetResponse::_internal_voxel_size(int index) const {
  return voxel_size_.Get(index);
}
inline float ImageGetResponse::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageGetResponse.voxel_size)
  return _internal_voxel_size(index);
}
inline void ImageGetResponse::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageGetResponse.voxel_size)
}
inline void ImageGetResponse::_internal_add_voxel_size(float value) {
  voxel_size_.Add(value);
}
inline void ImageGetResponse::add_voxel_size(float value) {
  _internal_add_voxel_size(value);
  // @@protoc_insertion_point(field_add:icr.ImageGetResponse.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_voxel_size() const {
  return voxel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::voxel_size() const {
  // @@protoc_insertion_point(field_list:icr.ImageGetResponse.voxel_size)
  return _internal_voxel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_voxel_size() {
  return &voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageGetResponse.voxel_size)
  return _internal_mutable_voxel_size();
}

// repeated float origin = 4;
inline int ImageGetResponse::_internal_origin_size() const {
  return origin_.size();
}
inline int ImageGetResponse::origin_size() const {
  return _internal_origin_size();
}
inline void ImageGetResponse::clear_origin() {
  origin_.Clear();
}
inline float ImageGetResponse::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float ImageGetResponse::origin(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageGetResponse.origin)
  return _internal_origin(index);
}
inline void ImageGetResponse::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageGetResponse.origin)
}
inline void ImageGetResponse::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void ImageGetResponse::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:icr.ImageGetResponse.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::origin() const {
  // @@protoc_insertion_point(field_list:icr.ImageGetResponse.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageGetResponse.origin)
  return _internal_mutable_origin();
}

// repeated float data = 5;
inline int ImageGetResponse::_internal_data_size() const {
  return data_.size();
}
inline int ImageGetResponse::data_size() const {
  return _internal_data_size();
}
inline void ImageGetResponse::clear_data() {
  data_.Clear();
}
inline float ImageGetResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline float ImageGetResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageGetResponse.data)
  return _internal_data(index);
}
inline void ImageGetResponse::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageGetResponse.data)
}
inline void ImageGetResponse::_internal_add_data(float value) {
  data_.Add(value);
}
inline void ImageGetResponse::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:icr.ImageGetResponse.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::data() const {
  // @@protoc_insertion_point(field_list:icr.ImageGetResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageGetResponse.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ImageSetRequest

// string id = 1;
inline void ImageSetRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageSetRequest::id() const {
  // @@protoc_insertion_point(field_get:icr.ImageSetRequest.id)
  return _internal_id();
}
inline void ImageSetRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.ImageSetRequest.id)
}
inline std::string* ImageSetRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.ImageSetRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ImageSetRequest::_internal_id() const {
  return id_.Get();
}
inline void ImageSetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageSetRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.ImageSetRequest.id)
}
inline void ImageSetRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.ImageSetRequest.id)
}
inline void ImageSetRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.ImageSetRequest.id)
}
inline std::string* ImageSetRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageSetRequest::release_id() {
  // @@protoc_insertion_point(field_release:icr.ImageSetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageSetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.ImageSetRequest.id)
}

// repeated int32 image_size = 2;
inline int ImageSetRequest::_internal_image_size_size() const {
  return image_size_.size();
}
inline int ImageSetRequest::image_size_size() const {
  return _internal_image_size_size();
}
inline void ImageSetRequest::clear_image_size() {
  image_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSetRequest::_internal_image_size(int index) const {
  return image_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSetRequest::image_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageSetRequest.image_size)
  return _internal_image_size(index);
}
inline void ImageSetRequest::set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageSetRequest.image_size)
}
inline void ImageSetRequest::_internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Add(value);
}
inline void ImageSetRequest::add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_size(value);
  // @@protoc_insertion_point(field_add:icr.ImageSetRequest.image_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageSetRequest::_internal_image_size() const {
  return image_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageSetRequest::image_size() const {
  // @@protoc_insertion_point(field_list:icr.ImageSetRequest.image_size)
  return _internal_image_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageSetRequest::_internal_mutable_image_size() {
  return &image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageSetRequest::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageSetRequest.image_size)
  return _internal_mutable_image_size();
}

// repeated float voxel_size = 3;
inline int ImageSetRequest::_internal_voxel_size_size() const {
  return voxel_size_.size();
}
inline int ImageSetRequest::voxel_size_size() const {
  return _internal_voxel_size_size();
}
inline void ImageSetRequest::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float ImageSetRequest::_internal_voxel_size(int index) const {
  return voxel_size_.Get(index);
}
inline float ImageSetRequest::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageSetRequest.voxel_size)
  return _internal_voxel_size(index);
}
inline void ImageSetRequest::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageSetRequest.voxel_size)
}
inline void ImageSetRequest::_internal_add_voxel_size(float value) {
  voxel_size_.Add(value);
}
inline void ImageSetRequest::add_voxel_size(float value) {
  _internal_add_voxel_size(value);
  // @@protoc_insertion_point(field_add:icr.ImageSetRequest.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_voxel_size() const {
  return voxel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::voxel_size() const {
  // @@protoc_insertion_point(field_list:icr.ImageSetRequest.voxel_size)
  return _internal_voxel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_voxel_size() {
  return &voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageSetRequest.voxel_size)
  return _internal_mutable_voxel_size();
}

// repeated float origin = 4;
inline int ImageSetRequest::_internal_origin_size() const {
  return origin_.size();
}
inline int ImageSetRequest::origin_size() const {
  return _internal_origin_size();
}
inline void ImageSetRequest::clear_origin() {
  origin_.Clear();
}
inline float ImageSetRequest::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float ImageSetRequest::origin(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageSetRequest.origin)
  return _internal_origin(index);
}
inline void ImageSetRequest::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageSetRequest.origin)
}
inline void ImageSetRequest::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void ImageSetRequest::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:icr.ImageSetRequest.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::origin() const {
  // @@protoc_insertion_point(field_list:icr.ImageSetRequest.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageSetRequest.origin)
  return _internal_mutable_origin();
}

// repeated float data = 5;
inline int ImageSetRequest::_internal_data_size() const {
  return data_.size();
}
inline int ImageSetRequest::data_size() const {
  return _internal_data_size();
}
inline void ImageSetRequest::clear_data() {
  data_.Clear();
}
inline float ImageSetRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline float ImageSetRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:icr.ImageSetRequest.data)
  return _internal_data(index);
}
inline void ImageSetRequest::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.ImageSetRequest.data)
}
inline void ImageSetRequest::_internal_add_data(float value) {
  data_.Add(value);
}
inline void ImageSetRequest::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:icr.ImageSetRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::data() const {
  // @@protoc_insertion_point(field_list:icr.ImageSetRequest.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:icr.ImageSetRequest.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ImageSetResponse

// string id = 1;
inline void ImageSetResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageSetResponse::id() const {
  // @@protoc_insertion_point(field_get:icr.ImageSetResponse.id)
  return _internal_id();
}
inline void ImageSetResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.ImageSetResponse.id)
}
inline std::string* ImageSetResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.ImageSetResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ImageSetResponse::_internal_id() const {
  return id_.Get();
}
inline void ImageSetResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageSetResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.ImageSetResponse.id)
}
inline void ImageSetResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.ImageSetResponse.id)
}
inline void ImageSetResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.ImageSetResponse.id)
}
inline std::string* ImageSetResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageSetResponse::release_id() {
  // @@protoc_insertion_point(field_release:icr.ImageSetResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageSetResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.ImageSetResponse.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace icr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
