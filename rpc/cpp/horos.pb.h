// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: horos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_horos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "roi.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_horos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_horos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_horos_2eproto;
namespace pyosirix {
class DicomDataRequest;
struct DicomDataRequestDefaultTypeInternal;
extern DicomDataRequestDefaultTypeInternal _DicomDataRequest_default_instance_;
class DicomDataResponse;
struct DicomDataResponseDefaultTypeInternal;
extern DicomDataResponseDefaultTypeInternal _DicomDataResponse_default_instance_;
class ImageGetRequest;
struct ImageGetRequestDefaultTypeInternal;
extern ImageGetRequestDefaultTypeInternal _ImageGetRequest_default_instance_;
class ImageGetResponse;
struct ImageGetResponseDefaultTypeInternal;
extern ImageGetResponseDefaultTypeInternal _ImageGetResponse_default_instance_;
class ImageSetRequest;
struct ImageSetRequestDefaultTypeInternal;
extern ImageSetRequestDefaultTypeInternal _ImageSetRequest_default_instance_;
class ImageSetResponse;
struct ImageSetResponseDefaultTypeInternal;
extern ImageSetResponseDefaultTypeInternal _ImageSetResponse_default_instance_;
class MethodResponse;
struct MethodResponseDefaultTypeInternal;
extern MethodResponseDefaultTypeInternal _MethodResponse_default_instance_;
class NullResponse;
struct NullResponseDefaultTypeInternal;
extern NullResponseDefaultTypeInternal _NullResponse_default_instance_;
}  // namespace pyosirix
PROTOBUF_NAMESPACE_OPEN
template<> ::pyosirix::DicomDataRequest* Arena::CreateMaybeMessage<::pyosirix::DicomDataRequest>(Arena*);
template<> ::pyosirix::DicomDataResponse* Arena::CreateMaybeMessage<::pyosirix::DicomDataResponse>(Arena*);
template<> ::pyosirix::ImageGetRequest* Arena::CreateMaybeMessage<::pyosirix::ImageGetRequest>(Arena*);
template<> ::pyosirix::ImageGetResponse* Arena::CreateMaybeMessage<::pyosirix::ImageGetResponse>(Arena*);
template<> ::pyosirix::ImageSetRequest* Arena::CreateMaybeMessage<::pyosirix::ImageSetRequest>(Arena*);
template<> ::pyosirix::ImageSetResponse* Arena::CreateMaybeMessage<::pyosirix::ImageSetResponse>(Arena*);
template<> ::pyosirix::MethodResponse* Arena::CreateMaybeMessage<::pyosirix::MethodResponse>(Arena*);
template<> ::pyosirix::NullResponse* Arena::CreateMaybeMessage<::pyosirix::NullResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pyosirix {

// ===================================================================

class DicomDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.DicomDataRequest) */ {
 public:
  inline DicomDataRequest() : DicomDataRequest(nullptr) {}
  ~DicomDataRequest() override;
  explicit constexpr DicomDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DicomDataRequest(const DicomDataRequest& from);
  DicomDataRequest(DicomDataRequest&& from) noexcept
    : DicomDataRequest() {
    *this = ::std::move(from);
  }

  inline DicomDataRequest& operator=(const DicomDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomDataRequest& operator=(DicomDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DicomDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DicomDataRequest* internal_default_instance() {
    return reinterpret_cast<const DicomDataRequest*>(
               &_DicomDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DicomDataRequest& a, DicomDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomDataRequest* New() const final {
    return new DicomDataRequest();
  }

  DicomDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DicomDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DicomDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.DicomDataRequest";
  }
  protected:
  explicit DicomDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.DicomDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class NullResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.NullResponse) */ {
 public:
  inline NullResponse() : NullResponse(nullptr) {}
  ~NullResponse() override;
  explicit constexpr NullResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullResponse(const NullResponse& from);
  NullResponse(NullResponse&& from) noexcept
    : NullResponse() {
    *this = ::std::move(from);
  }

  inline NullResponse& operator=(const NullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullResponse& operator=(NullResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullResponse* internal_default_instance() {
    return reinterpret_cast<const NullResponse*>(
               &_NullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NullResponse& a, NullResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NullResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullResponse* New() const final {
    return new NullResponse();
  }

  NullResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NullResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NullResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.NullResponse";
  }
  protected:
  explicit NullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.NullResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class DicomDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.DicomDataResponse) */ {
 public:
  inline DicomDataResponse() : DicomDataResponse(nullptr) {}
  ~DicomDataResponse() override;
  explicit constexpr DicomDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DicomDataResponse(const DicomDataResponse& from);
  DicomDataResponse(DicomDataResponse&& from) noexcept
    : DicomDataResponse() {
    *this = ::std::move(from);
  }

  inline DicomDataResponse& operator=(const DicomDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomDataResponse& operator=(DicomDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DicomDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DicomDataResponse* internal_default_instance() {
    return reinterpret_cast<const DicomDataResponse*>(
               &_DicomDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DicomDataResponse& a, DicomDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomDataResponse* New() const final {
    return new DicomDataResponse();
  }

  DicomDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DicomDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DicomDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.DicomDataResponse";
  }
  protected:
  explicit DicomDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileListFieldNumber = 5,
    kIdFieldNumber = 1,
    kPatientIdFieldNumber = 2,
    kStudyInstanceUidFieldNumber = 3,
    kSeriesInstanceUidFieldNumber = 4,
  };
  // repeated string file_list = 5;
  int file_list_size() const;
  private:
  int _internal_file_list_size() const;
  public:
  void clear_file_list();
  const std::string& file_list(int index) const;
  std::string* mutable_file_list(int index);
  void set_file_list(int index, const std::string& value);
  void set_file_list(int index, std::string&& value);
  void set_file_list(int index, const char* value);
  void set_file_list(int index, const char* value, size_t size);
  std::string* add_file_list();
  void add_file_list(const std::string& value);
  void add_file_list(std::string&& value);
  void add_file_list(const char* value);
  void add_file_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_list();
  private:
  const std::string& _internal_file_list(int index) const;
  std::string* _internal_add_file_list();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string patient_id = 2;
  void clear_patient_id();
  const std::string& patient_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patient_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patient_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);
  private:
  const std::string& _internal_patient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patient_id(const std::string& value);
  std::string* _internal_mutable_patient_id();
  public:

  // string study_instance_uid = 3;
  void clear_study_instance_uid();
  const std::string& study_instance_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_study_instance_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_study_instance_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_study_instance_uid();
  void set_allocated_study_instance_uid(std::string* study_instance_uid);
  private:
  const std::string& _internal_study_instance_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_study_instance_uid(const std::string& value);
  std::string* _internal_mutable_study_instance_uid();
  public:

  // string series_instance_uid = 4;
  void clear_series_instance_uid();
  const std::string& series_instance_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_series_instance_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_series_instance_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_series_instance_uid();
  void set_allocated_series_instance_uid(std::string* series_instance_uid);
  private:
  const std::string& _internal_series_instance_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_series_instance_uid(const std::string& value);
  std::string* _internal_mutable_series_instance_uid();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.DicomDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr study_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_instance_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ImageGetRequest) */ {
 public:
  inline ImageGetRequest() : ImageGetRequest(nullptr) {}
  ~ImageGetRequest() override;
  explicit constexpr ImageGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageGetRequest(const ImageGetRequest& from);
  ImageGetRequest(ImageGetRequest&& from) noexcept
    : ImageGetRequest() {
    *this = ::std::move(from);
  }

  inline ImageGetRequest& operator=(const ImageGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageGetRequest& operator=(ImageGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageGetRequest* internal_default_instance() {
    return reinterpret_cast<const ImageGetRequest*>(
               &_ImageGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageGetRequest& a, ImageGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageGetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageGetRequest* New() const final {
    return new ImageGetRequest();
  }

  ImageGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ImageGetRequest";
  }
  protected:
  explicit ImageGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kViewerIdFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 viewer_id = 2;
  void clear_viewer_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id() const;
  void set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_viewer_id() const;
  void _internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ImageGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ImageGetResponse) */ {
 public:
  inline ImageGetResponse() : ImageGetResponse(nullptr) {}
  ~ImageGetResponse() override;
  explicit constexpr ImageGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageGetResponse(const ImageGetResponse& from);
  ImageGetResponse(ImageGetResponse&& from) noexcept
    : ImageGetResponse() {
    *this = ::std::move(from);
  }

  inline ImageGetResponse& operator=(const ImageGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageGetResponse& operator=(ImageGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageGetResponse* internal_default_instance() {
    return reinterpret_cast<const ImageGetResponse*>(
               &_ImageGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageGetResponse& a, ImageGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageGetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageGetResponse* New() const final {
    return new ImageGetResponse();
  }

  ImageGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ImageGetResponse";
  }
  protected:
  explicit ImageGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 3,
    kVoxelSizeFieldNumber = 4,
    kOriginFieldNumber = 5,
    kDataFieldNumber = 6,
    kIdFieldNumber = 1,
    kViewerIdFieldNumber = 2,
  };
  // repeated int32 image_size = 3;
  int image_size_size() const;
  private:
  int _internal_image_size_size() const;
  public:
  void clear_image_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_size() const;
  void _internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_size(int index) const;
  void set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_size();

  // repeated float voxel_size = 4;
  int voxel_size_size() const;
  private:
  int _internal_voxel_size_size() const;
  public:
  void clear_voxel_size();
  private:
  float _internal_voxel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voxel_size() const;
  void _internal_add_voxel_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voxel_size();
  public:
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float origin = 5;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // repeated float data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 viewer_id = 2;
  void clear_viewer_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id() const;
  void set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_viewer_id() const;
  void _internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ImageGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_size_;
  mutable std::atomic<int> _image_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ImageSetRequest) */ {
 public:
  inline ImageSetRequest() : ImageSetRequest(nullptr) {}
  ~ImageSetRequest() override;
  explicit constexpr ImageSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageSetRequest(const ImageSetRequest& from);
  ImageSetRequest(ImageSetRequest&& from) noexcept
    : ImageSetRequest() {
    *this = ::std::move(from);
  }

  inline ImageSetRequest& operator=(const ImageSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSetRequest& operator=(ImageSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageSetRequest* internal_default_instance() {
    return reinterpret_cast<const ImageSetRequest*>(
               &_ImageSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageSetRequest& a, ImageSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSetRequest* New() const final {
    return new ImageSetRequest();
  }

  ImageSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageSetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ImageSetRequest";
  }
  protected:
  explicit ImageSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 3,
    kVoxelSizeFieldNumber = 4,
    kOriginFieldNumber = 5,
    kDataFieldNumber = 6,
    kIdFieldNumber = 1,
    kViewerIdFieldNumber = 2,
  };
  // repeated int32 image_size = 3;
  int image_size_size() const;
  private:
  int _internal_image_size_size() const;
  public:
  void clear_image_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_size() const;
  void _internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_size(int index) const;
  void set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_size();

  // repeated float voxel_size = 4;
  int voxel_size_size() const;
  private:
  int _internal_voxel_size_size() const;
  public:
  void clear_voxel_size();
  private:
  float _internal_voxel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voxel_size() const;
  void _internal_add_voxel_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voxel_size();
  public:
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float origin = 5;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // repeated float data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 viewer_id = 2;
  void clear_viewer_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id() const;
  void set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_viewer_id() const;
  void _internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ImageSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_size_;
  mutable std::atomic<int> _image_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class ImageSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ImageSetResponse) */ {
 public:
  inline ImageSetResponse() : ImageSetResponse(nullptr) {}
  ~ImageSetResponse() override;
  explicit constexpr ImageSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageSetResponse(const ImageSetResponse& from);
  ImageSetResponse(ImageSetResponse&& from) noexcept
    : ImageSetResponse() {
    *this = ::std::move(from);
  }

  inline ImageSetResponse& operator=(const ImageSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSetResponse& operator=(ImageSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageSetResponse* internal_default_instance() {
    return reinterpret_cast<const ImageSetResponse*>(
               &_ImageSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ImageSetResponse& a, ImageSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSetResponse* New() const final {
    return new ImageSetResponse();
  }

  ImageSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageSetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageSetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ImageSetResponse";
  }
  protected:
  explicit ImageSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kViewerIdFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 viewer_id = 2;
  void clear_viewer_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id() const;
  void set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_viewer_id() const;
  void _internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ImageSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 viewer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class MethodResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.MethodResponse) */ {
 public:
  inline MethodResponse() : MethodResponse(nullptr) {}
  ~MethodResponse() override;
  explicit constexpr MethodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MethodResponse(const MethodResponse& from);
  MethodResponse(MethodResponse&& from) noexcept
    : MethodResponse() {
    *this = ::std::move(from);
  }

  inline MethodResponse& operator=(const MethodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MethodResponse& operator=(MethodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MethodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MethodResponse* internal_default_instance() {
    return reinterpret_cast<const MethodResponse*>(
               &_MethodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MethodResponse& a, MethodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MethodResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MethodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MethodResponse* New() const final {
    return new MethodResponse();
  }

  MethodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MethodResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MethodResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MethodResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MethodResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.MethodResponse";
  }
  protected:
  explicit MethodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string method_list = 2;
  int method_list_size() const;
  private:
  int _internal_method_list_size() const;
  public:
  void clear_method_list();
  const std::string& method_list(int index) const;
  std::string* mutable_method_list(int index);
  void set_method_list(int index, const std::string& value);
  void set_method_list(int index, std::string&& value);
  void set_method_list(int index, const char* value);
  void set_method_list(int index, const char* value, size_t size);
  std::string* add_method_list();
  void add_method_list(const std::string& value);
  void add_method_list(std::string&& value);
  void add_method_list(const char* value);
  void add_method_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method_list();
  private:
  const std::string& _internal_method_list(int index) const;
  std::string* _internal_add_method_list();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.MethodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DicomDataRequest

// string id = 1;
inline void DicomDataRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DicomDataRequest::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DicomDataRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataRequest.id)
}
inline std::string* DicomDataRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataRequest.id)
  return _s;
}
inline const std::string& DicomDataRequest::_internal_id() const {
  return id_.Get();
}
inline void DicomDataRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DicomDataRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DicomDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.DicomDataRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DicomDataRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.DicomDataRequest.id)
}

// -------------------------------------------------------------------

// NullResponse

// string id = 1;
inline void NullResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& NullResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.NullResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NullResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.NullResponse.id)
}
inline std::string* NullResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.NullResponse.id)
  return _s;
}
inline const std::string& NullResponse::_internal_id() const {
  return id_.Get();
}
inline void NullResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NullResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NullResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.NullResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NullResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.NullResponse.id)
}

// -------------------------------------------------------------------

// DicomDataResponse

// string id = 1;
inline void DicomDataResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DicomDataResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DicomDataResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.id)
}
inline std::string* DicomDataResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataResponse.id)
  return _s;
}
inline const std::string& DicomDataResponse::_internal_id() const {
  return id_.Get();
}
inline void DicomDataResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.DicomDataResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DicomDataResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.DicomDataResponse.id)
}

// string patient_id = 2;
inline void DicomDataResponse::clear_patient_id() {
  patient_id_.ClearToEmpty();
}
inline const std::string& DicomDataResponse::patient_id() const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataResponse.patient_id)
  return _internal_patient_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DicomDataResponse::set_patient_id(ArgT0&& arg0, ArgT... args) {
 
 patient_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.patient_id)
}
inline std::string* DicomDataResponse::mutable_patient_id() {
  std::string* _s = _internal_mutable_patient_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataResponse.patient_id)
  return _s;
}
inline const std::string& DicomDataResponse::_internal_patient_id() const {
  return patient_id_.Get();
}
inline void DicomDataResponse::_internal_set_patient_id(const std::string& value) {
  
  patient_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::_internal_mutable_patient_id() {
  
  return patient_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::release_patient_id() {
  // @@protoc_insertion_point(field_release:pyosirix.DicomDataResponse.patient_id)
  return patient_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DicomDataResponse::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.DicomDataResponse.patient_id)
}

// string study_instance_uid = 3;
inline void DicomDataResponse::clear_study_instance_uid() {
  study_instance_uid_.ClearToEmpty();
}
inline const std::string& DicomDataResponse::study_instance_uid() const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataResponse.study_instance_uid)
  return _internal_study_instance_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DicomDataResponse::set_study_instance_uid(ArgT0&& arg0, ArgT... args) {
 
 study_instance_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.study_instance_uid)
}
inline std::string* DicomDataResponse::mutable_study_instance_uid() {
  std::string* _s = _internal_mutable_study_instance_uid();
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataResponse.study_instance_uid)
  return _s;
}
inline const std::string& DicomDataResponse::_internal_study_instance_uid() const {
  return study_instance_uid_.Get();
}
inline void DicomDataResponse::_internal_set_study_instance_uid(const std::string& value) {
  
  study_instance_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::_internal_mutable_study_instance_uid() {
  
  return study_instance_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::release_study_instance_uid() {
  // @@protoc_insertion_point(field_release:pyosirix.DicomDataResponse.study_instance_uid)
  return study_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DicomDataResponse::set_allocated_study_instance_uid(std::string* study_instance_uid) {
  if (study_instance_uid != nullptr) {
    
  } else {
    
  }
  study_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), study_instance_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.DicomDataResponse.study_instance_uid)
}

// string series_instance_uid = 4;
inline void DicomDataResponse::clear_series_instance_uid() {
  series_instance_uid_.ClearToEmpty();
}
inline const std::string& DicomDataResponse::series_instance_uid() const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataResponse.series_instance_uid)
  return _internal_series_instance_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DicomDataResponse::set_series_instance_uid(ArgT0&& arg0, ArgT... args) {
 
 series_instance_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.series_instance_uid)
}
inline std::string* DicomDataResponse::mutable_series_instance_uid() {
  std::string* _s = _internal_mutable_series_instance_uid();
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataResponse.series_instance_uid)
  return _s;
}
inline const std::string& DicomDataResponse::_internal_series_instance_uid() const {
  return series_instance_uid_.Get();
}
inline void DicomDataResponse::_internal_set_series_instance_uid(const std::string& value) {
  
  series_instance_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::_internal_mutable_series_instance_uid() {
  
  return series_instance_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DicomDataResponse::release_series_instance_uid() {
  // @@protoc_insertion_point(field_release:pyosirix.DicomDataResponse.series_instance_uid)
  return series_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DicomDataResponse::set_allocated_series_instance_uid(std::string* series_instance_uid) {
  if (series_instance_uid != nullptr) {
    
  } else {
    
  }
  series_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series_instance_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.DicomDataResponse.series_instance_uid)
}

// repeated string file_list = 5;
inline int DicomDataResponse::_internal_file_list_size() const {
  return file_list_.size();
}
inline int DicomDataResponse::file_list_size() const {
  return _internal_file_list_size();
}
inline void DicomDataResponse::clear_file_list() {
  file_list_.Clear();
}
inline std::string* DicomDataResponse::add_file_list() {
  std::string* _s = _internal_add_file_list();
  // @@protoc_insertion_point(field_add_mutable:pyosirix.DicomDataResponse.file_list)
  return _s;
}
inline const std::string& DicomDataResponse::_internal_file_list(int index) const {
  return file_list_.Get(index);
}
inline const std::string& DicomDataResponse::file_list(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.DicomDataResponse.file_list)
  return _internal_file_list(index);
}
inline std::string* DicomDataResponse::mutable_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.DicomDataResponse.file_list)
  return file_list_.Mutable(index);
}
inline void DicomDataResponse::set_file_list(int index, const std::string& value) {
  file_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::set_file_list(int index, std::string&& value) {
  file_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::set_file_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::set_file_list(int index, const char* value, size_t size) {
  file_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pyosirix.DicomDataResponse.file_list)
}
inline std::string* DicomDataResponse::_internal_add_file_list() {
  return file_list_.Add();
}
inline void DicomDataResponse::add_file_list(const std::string& value) {
  file_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::add_file_list(std::string&& value) {
  file_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::add_file_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pyosirix.DicomDataResponse.file_list)
}
inline void DicomDataResponse::add_file_list(const char* value, size_t size) {
  file_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pyosirix.DicomDataResponse.file_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DicomDataResponse::file_list() const {
  // @@protoc_insertion_point(field_list:pyosirix.DicomDataResponse.file_list)
  return file_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DicomDataResponse::mutable_file_list() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.DicomDataResponse.file_list)
  return &file_list_;
}

// -------------------------------------------------------------------

// ImageGetRequest

// string id = 1;
inline void ImageGetRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ImageGetRequest::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageGetRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetRequest.id)
}
inline std::string* ImageGetRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.ImageGetRequest.id)
  return _s;
}
inline const std::string& ImageGetRequest::_internal_id() const {
  return id_.Get();
}
inline void ImageGetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageGetRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ImageGetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageGetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ImageGetRequest.id)
}

// uint64 viewer_id = 2;
inline void ImageGetRequest::clear_viewer_id() {
  viewer_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageGetRequest::_internal_viewer_id() const {
  return viewer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageGetRequest::viewer_id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetRequest.viewer_id)
  return _internal_viewer_id();
}
inline void ImageGetRequest::_internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  viewer_id_ = value;
}
inline void ImageGetRequest::set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_viewer_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetRequest.viewer_id)
}

// -------------------------------------------------------------------

// ImageGetResponse

// string id = 1;
inline void ImageGetResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ImageGetResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageGetResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.id)
}
inline std::string* ImageGetResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.ImageGetResponse.id)
  return _s;
}
inline const std::string& ImageGetResponse::_internal_id() const {
  return id_.Get();
}
inline void ImageGetResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageGetResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageGetResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ImageGetResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageGetResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ImageGetResponse.id)
}

// uint64 viewer_id = 2;
inline void ImageGetResponse::clear_viewer_id() {
  viewer_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageGetResponse::_internal_viewer_id() const {
  return viewer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageGetResponse::viewer_id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.viewer_id)
  return _internal_viewer_id();
}
inline void ImageGetResponse::_internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  viewer_id_ = value;
}
inline void ImageGetResponse::set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_viewer_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.viewer_id)
}

// repeated int32 image_size = 3;
inline int ImageGetResponse::_internal_image_size_size() const {
  return image_size_.size();
}
inline int ImageGetResponse::image_size_size() const {
  return _internal_image_size_size();
}
inline void ImageGetResponse::clear_image_size() {
  image_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageGetResponse::_internal_image_size(int index) const {
  return image_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageGetResponse::image_size(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.image_size)
  return _internal_image_size(index);
}
inline void ImageGetResponse::set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.image_size)
}
inline void ImageGetResponse::_internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Add(value);
}
inline void ImageGetResponse::add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_size(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageGetResponse.image_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageGetResponse::_internal_image_size() const {
  return image_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageGetResponse::image_size() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageGetResponse.image_size)
  return _internal_image_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageGetResponse::_internal_mutable_image_size() {
  return &image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageGetResponse::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageGetResponse.image_size)
  return _internal_mutable_image_size();
}

// repeated float voxel_size = 4;
inline int ImageGetResponse::_internal_voxel_size_size() const {
  return voxel_size_.size();
}
inline int ImageGetResponse::voxel_size_size() const {
  return _internal_voxel_size_size();
}
inline void ImageGetResponse::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float ImageGetResponse::_internal_voxel_size(int index) const {
  return voxel_size_.Get(index);
}
inline float ImageGetResponse::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.voxel_size)
  return _internal_voxel_size(index);
}
inline void ImageGetResponse::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.voxel_size)
}
inline void ImageGetResponse::_internal_add_voxel_size(float value) {
  voxel_size_.Add(value);
}
inline void ImageGetResponse::add_voxel_size(float value) {
  _internal_add_voxel_size(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageGetResponse.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_voxel_size() const {
  return voxel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::voxel_size() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageGetResponse.voxel_size)
  return _internal_voxel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_voxel_size() {
  return &voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageGetResponse.voxel_size)
  return _internal_mutable_voxel_size();
}

// repeated float origin = 5;
inline int ImageGetResponse::_internal_origin_size() const {
  return origin_.size();
}
inline int ImageGetResponse::origin_size() const {
  return _internal_origin_size();
}
inline void ImageGetResponse::clear_origin() {
  origin_.Clear();
}
inline float ImageGetResponse::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float ImageGetResponse::origin(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.origin)
  return _internal_origin(index);
}
inline void ImageGetResponse::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.origin)
}
inline void ImageGetResponse::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void ImageGetResponse::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageGetResponse.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::origin() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageGetResponse.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageGetResponse.origin)
  return _internal_mutable_origin();
}

// repeated float data = 6;
inline int ImageGetResponse::_internal_data_size() const {
  return data_.size();
}
inline int ImageGetResponse::data_size() const {
  return _internal_data_size();
}
inline void ImageGetResponse::clear_data() {
  data_.Clear();
}
inline float ImageGetResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline float ImageGetResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageGetResponse.data)
  return _internal_data(index);
}
inline void ImageGetResponse::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageGetResponse.data)
}
inline void ImageGetResponse::_internal_add_data(float value) {
  data_.Add(value);
}
inline void ImageGetResponse::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageGetResponse.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageGetResponse::data() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageGetResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageGetResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageGetResponse.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ImageSetRequest

// string id = 1;
inline void ImageSetRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ImageSetRequest::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageSetRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.id)
}
inline std::string* ImageSetRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.ImageSetRequest.id)
  return _s;
}
inline const std::string& ImageSetRequest::_internal_id() const {
  return id_.Get();
}
inline void ImageSetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageSetRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageSetRequest::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ImageSetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageSetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ImageSetRequest.id)
}

// uint64 viewer_id = 2;
inline void ImageSetRequest::clear_viewer_id() {
  viewer_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSetRequest::_internal_viewer_id() const {
  return viewer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSetRequest::viewer_id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.viewer_id)
  return _internal_viewer_id();
}
inline void ImageSetRequest::_internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  viewer_id_ = value;
}
inline void ImageSetRequest::set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_viewer_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.viewer_id)
}

// repeated int32 image_size = 3;
inline int ImageSetRequest::_internal_image_size_size() const {
  return image_size_.size();
}
inline int ImageSetRequest::image_size_size() const {
  return _internal_image_size_size();
}
inline void ImageSetRequest::clear_image_size() {
  image_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSetRequest::_internal_image_size(int index) const {
  return image_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageSetRequest::image_size(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.image_size)
  return _internal_image_size(index);
}
inline void ImageSetRequest::set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.image_size)
}
inline void ImageSetRequest::_internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Add(value);
}
inline void ImageSetRequest::add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_size(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageSetRequest.image_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageSetRequest::_internal_image_size() const {
  return image_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageSetRequest::image_size() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageSetRequest.image_size)
  return _internal_image_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageSetRequest::_internal_mutable_image_size() {
  return &image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageSetRequest::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageSetRequest.image_size)
  return _internal_mutable_image_size();
}

// repeated float voxel_size = 4;
inline int ImageSetRequest::_internal_voxel_size_size() const {
  return voxel_size_.size();
}
inline int ImageSetRequest::voxel_size_size() const {
  return _internal_voxel_size_size();
}
inline void ImageSetRequest::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float ImageSetRequest::_internal_voxel_size(int index) const {
  return voxel_size_.Get(index);
}
inline float ImageSetRequest::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.voxel_size)
  return _internal_voxel_size(index);
}
inline void ImageSetRequest::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.voxel_size)
}
inline void ImageSetRequest::_internal_add_voxel_size(float value) {
  voxel_size_.Add(value);
}
inline void ImageSetRequest::add_voxel_size(float value) {
  _internal_add_voxel_size(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageSetRequest.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_voxel_size() const {
  return voxel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::voxel_size() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageSetRequest.voxel_size)
  return _internal_voxel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_voxel_size() {
  return &voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageSetRequest.voxel_size)
  return _internal_mutable_voxel_size();
}

// repeated float origin = 5;
inline int ImageSetRequest::_internal_origin_size() const {
  return origin_.size();
}
inline int ImageSetRequest::origin_size() const {
  return _internal_origin_size();
}
inline void ImageSetRequest::clear_origin() {
  origin_.Clear();
}
inline float ImageSetRequest::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float ImageSetRequest::origin(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.origin)
  return _internal_origin(index);
}
inline void ImageSetRequest::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.origin)
}
inline void ImageSetRequest::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void ImageSetRequest::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageSetRequest.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::origin() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageSetRequest.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageSetRequest.origin)
  return _internal_mutable_origin();
}

// repeated float data = 6;
inline int ImageSetRequest::_internal_data_size() const {
  return data_.size();
}
inline int ImageSetRequest::data_size() const {
  return _internal_data_size();
}
inline void ImageSetRequest::clear_data() {
  data_.Clear();
}
inline float ImageSetRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline float ImageSetRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetRequest.data)
  return _internal_data(index);
}
inline void ImageSetRequest::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetRequest.data)
}
inline void ImageSetRequest::_internal_add_data(float value) {
  data_.Add(value);
}
inline void ImageSetRequest::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:pyosirix.ImageSetRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImageSetRequest::data() const {
  // @@protoc_insertion_point(field_list:pyosirix.ImageSetRequest.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImageSetRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ImageSetRequest.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ImageSetResponse

// string id = 1;
inline void ImageSetResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ImageSetResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageSetResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetResponse.id)
}
inline std::string* ImageSetResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.ImageSetResponse.id)
  return _s;
}
inline const std::string& ImageSetResponse::_internal_id() const {
  return id_.Get();
}
inline void ImageSetResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageSetResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageSetResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ImageSetResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageSetResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ImageSetResponse.id)
}

// uint64 viewer_id = 2;
inline void ImageSetResponse::clear_viewer_id() {
  viewer_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSetResponse::_internal_viewer_id() const {
  return viewer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSetResponse::viewer_id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ImageSetResponse.viewer_id)
  return _internal_viewer_id();
}
inline void ImageSetResponse::_internal_set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  viewer_id_ = value;
}
inline void ImageSetResponse::set_viewer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_viewer_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ImageSetResponse.viewer_id)
}

// -------------------------------------------------------------------

// MethodResponse

// string id = 1;
inline void MethodResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MethodResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.MethodResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MethodResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pyosirix.MethodResponse.id)
}
inline std::string* MethodResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pyosirix.MethodResponse.id)
  return _s;
}
inline const std::string& MethodResponse::_internal_id() const {
  return id_.Get();
}
inline void MethodResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MethodResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MethodResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.MethodResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MethodResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.MethodResponse.id)
}

// repeated string method_list = 2;
inline int MethodResponse::_internal_method_list_size() const {
  return method_list_.size();
}
inline int MethodResponse::method_list_size() const {
  return _internal_method_list_size();
}
inline void MethodResponse::clear_method_list() {
  method_list_.Clear();
}
inline std::string* MethodResponse::add_method_list() {
  std::string* _s = _internal_add_method_list();
  // @@protoc_insertion_point(field_add_mutable:pyosirix.MethodResponse.method_list)
  return _s;
}
inline const std::string& MethodResponse::_internal_method_list(int index) const {
  return method_list_.Get(index);
}
inline const std::string& MethodResponse::method_list(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.MethodResponse.method_list)
  return _internal_method_list(index);
}
inline std::string* MethodResponse::mutable_method_list(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.MethodResponse.method_list)
  return method_list_.Mutable(index);
}
inline void MethodResponse::set_method_list(int index, const std::string& value) {
  method_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::set_method_list(int index, std::string&& value) {
  method_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::set_method_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::set_method_list(int index, const char* value, size_t size) {
  method_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pyosirix.MethodResponse.method_list)
}
inline std::string* MethodResponse::_internal_add_method_list() {
  return method_list_.Add();
}
inline void MethodResponse::add_method_list(const std::string& value) {
  method_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::add_method_list(std::string&& value) {
  method_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::add_method_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pyosirix.MethodResponse.method_list)
}
inline void MethodResponse::add_method_list(const char* value, size_t size) {
  method_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pyosirix.MethodResponse.method_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MethodResponse::method_list() const {
  // @@protoc_insertion_point(field_list:pyosirix.MethodResponse.method_list)
  return method_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MethodResponse::mutable_method_list() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.MethodResponse.method_list)
  return &method_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pyosirix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
