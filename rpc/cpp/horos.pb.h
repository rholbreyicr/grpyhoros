// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: horos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_horos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_horos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_horos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_horos_2eproto;
namespace icr {
class DicomImageRequest;
class DicomImageRequestDefaultTypeInternal;
extern DicomImageRequestDefaultTypeInternal _DicomImageRequest_default_instance_;
class DicomImageResponse;
class DicomImageResponseDefaultTypeInternal;
extern DicomImageResponseDefaultTypeInternal _DicomImageResponse_default_instance_;
class DicomNameRequest;
class DicomNameRequestDefaultTypeInternal;
extern DicomNameRequestDefaultTypeInternal _DicomNameRequest_default_instance_;
class DicomNameResponse;
class DicomNameResponseDefaultTypeInternal;
extern DicomNameResponseDefaultTypeInternal _DicomNameResponse_default_instance_;
}  // namespace icr
PROTOBUF_NAMESPACE_OPEN
template<> ::icr::DicomImageRequest* Arena::CreateMaybeMessage<::icr::DicomImageRequest>(Arena*);
template<> ::icr::DicomImageResponse* Arena::CreateMaybeMessage<::icr::DicomImageResponse>(Arena*);
template<> ::icr::DicomNameRequest* Arena::CreateMaybeMessage<::icr::DicomNameRequest>(Arena*);
template<> ::icr::DicomNameResponse* Arena::CreateMaybeMessage<::icr::DicomNameResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icr {

// ===================================================================

class DicomNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomNameRequest) */ {
 public:
  inline DicomNameRequest() : DicomNameRequest(nullptr) {}
  virtual ~DicomNameRequest();

  DicomNameRequest(const DicomNameRequest& from);
  DicomNameRequest(DicomNameRequest&& from) noexcept
    : DicomNameRequest() {
    *this = ::std::move(from);
  }

  inline DicomNameRequest& operator=(const DicomNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomNameRequest& operator=(DicomNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomNameRequest* internal_default_instance() {
    return reinterpret_cast<const DicomNameRequest*>(
               &_DicomNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DicomNameRequest& a, DicomNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomNameRequest* New() const final {
    return CreateMaybeMessage<DicomNameRequest>(nullptr);
  }

  DicomNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomNameRequest& from);
  void MergeFrom(const DicomNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomNameRequest";
  }
  protected:
  explicit DicomNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class DicomNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomNameResponse) */ {
 public:
  inline DicomNameResponse() : DicomNameResponse(nullptr) {}
  virtual ~DicomNameResponse();

  DicomNameResponse(const DicomNameResponse& from);
  DicomNameResponse(DicomNameResponse&& from) noexcept
    : DicomNameResponse() {
    *this = ::std::move(from);
  }

  inline DicomNameResponse& operator=(const DicomNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomNameResponse& operator=(DicomNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomNameResponse* internal_default_instance() {
    return reinterpret_cast<const DicomNameResponse*>(
               &_DicomNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DicomNameResponse& a, DicomNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomNameResponse* New() const final {
    return CreateMaybeMessage<DicomNameResponse>(nullptr);
  }

  DicomNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomNameResponse& from);
  void MergeFrom(const DicomNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomNameResponse";
  }
  protected:
  explicit DicomNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDicomNameFieldNumber = 1,
  };
  // string dicom_name = 1;
  void clear_dicom_name();
  const std::string& dicom_name() const;
  void set_dicom_name(const std::string& value);
  void set_dicom_name(std::string&& value);
  void set_dicom_name(const char* value);
  void set_dicom_name(const char* value, size_t size);
  std::string* mutable_dicom_name();
  std::string* release_dicom_name();
  void set_allocated_dicom_name(std::string* dicom_name);
  private:
  const std::string& _internal_dicom_name() const;
  void _internal_set_dicom_name(const std::string& value);
  std::string* _internal_mutable_dicom_name();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dicom_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class DicomImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomImageRequest) */ {
 public:
  inline DicomImageRequest() : DicomImageRequest(nullptr) {}
  virtual ~DicomImageRequest();

  DicomImageRequest(const DicomImageRequest& from);
  DicomImageRequest(DicomImageRequest&& from) noexcept
    : DicomImageRequest() {
    *this = ::std::move(from);
  }

  inline DicomImageRequest& operator=(const DicomImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomImageRequest& operator=(DicomImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomImageRequest* internal_default_instance() {
    return reinterpret_cast<const DicomImageRequest*>(
               &_DicomImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DicomImageRequest& a, DicomImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomImageRequest* New() const final {
    return CreateMaybeMessage<DicomImageRequest>(nullptr);
  }

  DicomImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomImageRequest& from);
  void MergeFrom(const DicomImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomImageRequest";
  }
  protected:
  explicit DicomImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// -------------------------------------------------------------------

class DicomImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icr.DicomImageResponse) */ {
 public:
  inline DicomImageResponse() : DicomImageResponse(nullptr) {}
  virtual ~DicomImageResponse();

  DicomImageResponse(const DicomImageResponse& from);
  DicomImageResponse(DicomImageResponse&& from) noexcept
    : DicomImageResponse() {
    *this = ::std::move(from);
  }

  inline DicomImageResponse& operator=(const DicomImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomImageResponse& operator=(DicomImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DicomImageResponse* internal_default_instance() {
    return reinterpret_cast<const DicomImageResponse*>(
               &_DicomImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DicomImageResponse& a, DicomImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomImageResponse* New() const final {
    return CreateMaybeMessage<DicomImageResponse>(nullptr);
  }

  DicomImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomImageResponse& from);
  void MergeFrom(const DicomImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icr.DicomImageResponse";
  }
  protected:
  explicit DicomImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_horos_2eproto);
    return ::descriptor_table_horos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 2,
    kVoxelSizeFieldNumber = 3,
    kOriginFieldNumber = 4,
    kDataFieldNumber = 5,
    kDicomNameFieldNumber = 1,
  };
  // repeated int32 image_size = 2;
  int image_size_size() const;
  private:
  int _internal_image_size_size() const;
  public:
  void clear_image_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_size() const;
  void _internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_size(int index) const;
  void set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_size();

  // repeated float voxel_size = 3;
  int voxel_size_size() const;
  private:
  int _internal_voxel_size_size() const;
  public:
  void clear_voxel_size();
  private:
  float _internal_voxel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voxel_size() const;
  void _internal_add_voxel_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voxel_size();
  public:
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voxel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float origin = 4;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // repeated float data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // string dicom_name = 1;
  void clear_dicom_name();
  const std::string& dicom_name() const;
  void set_dicom_name(const std::string& value);
  void set_dicom_name(std::string&& value);
  void set_dicom_name(const char* value);
  void set_dicom_name(const char* value, size_t size);
  std::string* mutable_dicom_name();
  std::string* release_dicom_name();
  void set_allocated_dicom_name(std::string* dicom_name);
  private:
  const std::string& _internal_dicom_name() const;
  void _internal_set_dicom_name(const std::string& value);
  std::string* _internal_mutable_dicom_name();
  public:

  // @@protoc_insertion_point(class_scope:icr.DicomImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_size_;
  mutable std::atomic<int> _image_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voxel_size_;
  mutable std::atomic<int> _voxel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  mutable std::atomic<int> _origin_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dicom_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_horos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DicomNameRequest

// string id = 1;
inline void DicomNameRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomNameRequest::id() const {
  // @@protoc_insertion_point(field_get:icr.DicomNameRequest.id)
  return _internal_id();
}
inline void DicomNameRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.DicomNameRequest.id)
}
inline std::string* DicomNameRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.DicomNameRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DicomNameRequest::_internal_id() const {
  return id_.Get();
}
inline void DicomNameRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomNameRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomNameRequest.id)
}
inline void DicomNameRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomNameRequest.id)
}
inline void DicomNameRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomNameRequest.id)
}
inline std::string* DicomNameRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomNameRequest::release_id() {
  // @@protoc_insertion_point(field_release:icr.DicomNameRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomNameRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomNameRequest.id)
}

// -------------------------------------------------------------------

// DicomNameResponse

// string dicom_name = 1;
inline void DicomNameResponse::clear_dicom_name() {
  dicom_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomNameResponse::dicom_name() const {
  // @@protoc_insertion_point(field_get:icr.DicomNameResponse.dicom_name)
  return _internal_dicom_name();
}
inline void DicomNameResponse::set_dicom_name(const std::string& value) {
  _internal_set_dicom_name(value);
  // @@protoc_insertion_point(field_set:icr.DicomNameResponse.dicom_name)
}
inline std::string* DicomNameResponse::mutable_dicom_name() {
  // @@protoc_insertion_point(field_mutable:icr.DicomNameResponse.dicom_name)
  return _internal_mutable_dicom_name();
}
inline const std::string& DicomNameResponse::_internal_dicom_name() const {
  return dicom_name_.Get();
}
inline void DicomNameResponse::_internal_set_dicom_name(const std::string& value) {
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomNameResponse::set_dicom_name(std::string&& value) {
  
  dicom_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomNameResponse.dicom_name)
}
inline void DicomNameResponse::set_dicom_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomNameResponse.dicom_name)
}
inline void DicomNameResponse::set_dicom_name(const char* value,
    size_t size) {
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomNameResponse.dicom_name)
}
inline std::string* DicomNameResponse::_internal_mutable_dicom_name() {
  
  return dicom_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomNameResponse::release_dicom_name() {
  // @@protoc_insertion_point(field_release:icr.DicomNameResponse.dicom_name)
  return dicom_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomNameResponse::set_allocated_dicom_name(std::string* dicom_name) {
  if (dicom_name != nullptr) {
    
  } else {
    
  }
  dicom_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dicom_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomNameResponse.dicom_name)
}

// -------------------------------------------------------------------

// DicomImageRequest

// string id = 1;
inline void DicomImageRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomImageRequest::id() const {
  // @@protoc_insertion_point(field_get:icr.DicomImageRequest.id)
  return _internal_id();
}
inline void DicomImageRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icr.DicomImageRequest.id)
}
inline std::string* DicomImageRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:icr.DicomImageRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DicomImageRequest::_internal_id() const {
  return id_.Get();
}
inline void DicomImageRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomImageRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomImageRequest.id)
}
inline void DicomImageRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomImageRequest.id)
}
inline void DicomImageRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomImageRequest.id)
}
inline std::string* DicomImageRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomImageRequest::release_id() {
  // @@protoc_insertion_point(field_release:icr.DicomImageRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomImageRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomImageRequest.id)
}

// -------------------------------------------------------------------

// DicomImageResponse

// string dicom_name = 1;
inline void DicomImageResponse::clear_dicom_name() {
  dicom_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DicomImageResponse::dicom_name() const {
  // @@protoc_insertion_point(field_get:icr.DicomImageResponse.dicom_name)
  return _internal_dicom_name();
}
inline void DicomImageResponse::set_dicom_name(const std::string& value) {
  _internal_set_dicom_name(value);
  // @@protoc_insertion_point(field_set:icr.DicomImageResponse.dicom_name)
}
inline std::string* DicomImageResponse::mutable_dicom_name() {
  // @@protoc_insertion_point(field_mutable:icr.DicomImageResponse.dicom_name)
  return _internal_mutable_dicom_name();
}
inline const std::string& DicomImageResponse::_internal_dicom_name() const {
  return dicom_name_.Get();
}
inline void DicomImageResponse::_internal_set_dicom_name(const std::string& value) {
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DicomImageResponse::set_dicom_name(std::string&& value) {
  
  dicom_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icr.DicomImageResponse.dicom_name)
}
inline void DicomImageResponse::set_dicom_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:icr.DicomImageResponse.dicom_name)
}
inline void DicomImageResponse::set_dicom_name(const char* value,
    size_t size) {
  
  dicom_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icr.DicomImageResponse.dicom_name)
}
inline std::string* DicomImageResponse::_internal_mutable_dicom_name() {
  
  return dicom_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DicomImageResponse::release_dicom_name() {
  // @@protoc_insertion_point(field_release:icr.DicomImageResponse.dicom_name)
  return dicom_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomImageResponse::set_allocated_dicom_name(std::string* dicom_name) {
  if (dicom_name != nullptr) {
    
  } else {
    
  }
  dicom_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dicom_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icr.DicomImageResponse.dicom_name)
}

// repeated int32 image_size = 2;
inline int DicomImageResponse::_internal_image_size_size() const {
  return image_size_.size();
}
inline int DicomImageResponse::image_size_size() const {
  return _internal_image_size_size();
}
inline void DicomImageResponse::clear_image_size() {
  image_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicomImageResponse::_internal_image_size(int index) const {
  return image_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicomImageResponse::image_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.DicomImageResponse.image_size)
  return _internal_image_size(index);
}
inline void DicomImageResponse::set_image_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.DicomImageResponse.image_size)
}
inline void DicomImageResponse::_internal_add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_size_.Add(value);
}
inline void DicomImageResponse::add_image_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_size(value);
  // @@protoc_insertion_point(field_add:icr.DicomImageResponse.image_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DicomImageResponse::_internal_image_size() const {
  return image_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DicomImageResponse::image_size() const {
  // @@protoc_insertion_point(field_list:icr.DicomImageResponse.image_size)
  return _internal_image_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DicomImageResponse::_internal_mutable_image_size() {
  return &image_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DicomImageResponse::mutable_image_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.DicomImageResponse.image_size)
  return _internal_mutable_image_size();
}

// repeated float voxel_size = 3;
inline int DicomImageResponse::_internal_voxel_size_size() const {
  return voxel_size_.size();
}
inline int DicomImageResponse::voxel_size_size() const {
  return _internal_voxel_size_size();
}
inline void DicomImageResponse::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float DicomImageResponse::_internal_voxel_size(int index) const {
  return voxel_size_.Get(index);
}
inline float DicomImageResponse::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:icr.DicomImageResponse.voxel_size)
  return _internal_voxel_size(index);
}
inline void DicomImageResponse::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.DicomImageResponse.voxel_size)
}
inline void DicomImageResponse::_internal_add_voxel_size(float value) {
  voxel_size_.Add(value);
}
inline void DicomImageResponse::add_voxel_size(float value) {
  _internal_add_voxel_size(value);
  // @@protoc_insertion_point(field_add:icr.DicomImageResponse.voxel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::_internal_voxel_size() const {
  return voxel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::voxel_size() const {
  // @@protoc_insertion_point(field_list:icr.DicomImageResponse.voxel_size)
  return _internal_voxel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::_internal_mutable_voxel_size() {
  return &voxel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:icr.DicomImageResponse.voxel_size)
  return _internal_mutable_voxel_size();
}

// repeated float origin = 4;
inline int DicomImageResponse::_internal_origin_size() const {
  return origin_.size();
}
inline int DicomImageResponse::origin_size() const {
  return _internal_origin_size();
}
inline void DicomImageResponse::clear_origin() {
  origin_.Clear();
}
inline float DicomImageResponse::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float DicomImageResponse::origin(int index) const {
  // @@protoc_insertion_point(field_get:icr.DicomImageResponse.origin)
  return _internal_origin(index);
}
inline void DicomImageResponse::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.DicomImageResponse.origin)
}
inline void DicomImageResponse::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void DicomImageResponse::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:icr.DicomImageResponse.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::origin() const {
  // @@protoc_insertion_point(field_list:icr.DicomImageResponse.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:icr.DicomImageResponse.origin)
  return _internal_mutable_origin();
}

// repeated float data = 5;
inline int DicomImageResponse::_internal_data_size() const {
  return data_.size();
}
inline int DicomImageResponse::data_size() const {
  return _internal_data_size();
}
inline void DicomImageResponse::clear_data() {
  data_.Clear();
}
inline float DicomImageResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline float DicomImageResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:icr.DicomImageResponse.data)
  return _internal_data(index);
}
inline void DicomImageResponse::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:icr.DicomImageResponse.data)
}
inline void DicomImageResponse::_internal_add_data(float value) {
  data_.Add(value);
}
inline void DicomImageResponse::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:icr.DicomImageResponse.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DicomImageResponse::data() const {
  // @@protoc_insertion_point(field_list:icr.DicomImageResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DicomImageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:icr.DicomImageResponse.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace icr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_horos_2eproto
