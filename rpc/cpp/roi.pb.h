// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_roi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_roi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_roi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_roi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_roi_2eproto;
namespace pyosirix {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class ROI;
class ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class ROIListRequest;
class ROIListRequestDefaultTypeInternal;
extern ROIListRequestDefaultTypeInternal _ROIListRequest_default_instance_;
class ROIListResponse;
class ROIListResponseDefaultTypeInternal;
extern ROIListResponseDefaultTypeInternal _ROIListResponse_default_instance_;
}  // namespace pyosirix
PROTOBUF_NAMESPACE_OPEN
template<> ::pyosirix::Color* Arena::CreateMaybeMessage<::pyosirix::Color>(Arena*);
template<> ::pyosirix::Point* Arena::CreateMaybeMessage<::pyosirix::Point>(Arena*);
template<> ::pyosirix::ROI* Arena::CreateMaybeMessage<::pyosirix::ROI>(Arena*);
template<> ::pyosirix::ROIListRequest* Arena::CreateMaybeMessage<::pyosirix::ROIListRequest>(Arena*);
template<> ::pyosirix::ROIListResponse* Arena::CreateMaybeMessage<::pyosirix::ROIListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pyosirix {

// ===================================================================

class ROIListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ROIListRequest) */ {
 public:
  inline ROIListRequest() : ROIListRequest(nullptr) {}
  virtual ~ROIListRequest();

  ROIListRequest(const ROIListRequest& from);
  ROIListRequest(ROIListRequest&& from) noexcept
    : ROIListRequest() {
    *this = ::std::move(from);
  }

  inline ROIListRequest& operator=(const ROIListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIListRequest& operator=(ROIListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIListRequest* internal_default_instance() {
    return reinterpret_cast<const ROIListRequest*>(
               &_ROIListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ROIListRequest& a, ROIListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIListRequest* New() const final {
    return CreateMaybeMessage<ROIListRequest>(nullptr);
  }

  ROIListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIListRequest& from);
  void MergeFrom(const ROIListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ROIListRequest";
  }
  protected:
  explicit ROIListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ROIListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class ROI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ROI) */ {
 public:
  inline ROI() : ROI(nullptr) {}
  virtual ~ROI();

  ROI(const ROI& from);
  ROI(ROI&& from) noexcept
    : ROI() {
    *this = ::std::move(from);
  }

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROI& operator=(ROI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ROI& a, ROI& b) {
    a.Swap(&b);
  }
  inline void Swap(ROI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROI* New() const final {
    return CreateMaybeMessage<ROI>(nullptr);
  }

  ROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROI& from);
  void MergeFrom(const ROI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ROI";
  }
  protected:
  explicit ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 10,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kSeriesUidFieldNumber = 3,
    kImageUidFieldNumber = 4,
    kColorFieldNumber = 5,
    kCentreFieldNumber = 9,
    kOpacityFieldNumber = 6,
    kThicknessFieldNumber = 7,
    kSelectedFieldNumber = 8,
  };
  // repeated .pyosirix.Point points = 10;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::pyosirix::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >*
      mutable_points();
  private:
  const ::pyosirix::Point& _internal_points(int index) const;
  ::pyosirix::Point* _internal_add_points();
  public:
  const ::pyosirix::Point& points(int index) const;
  ::pyosirix::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >&
      points() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string series_uid = 3;
  void clear_series_uid();
  const std::string& series_uid() const;
  void set_series_uid(const std::string& value);
  void set_series_uid(std::string&& value);
  void set_series_uid(const char* value);
  void set_series_uid(const char* value, size_t size);
  std::string* mutable_series_uid();
  std::string* release_series_uid();
  void set_allocated_series_uid(std::string* series_uid);
  private:
  const std::string& _internal_series_uid() const;
  void _internal_set_series_uid(const std::string& value);
  std::string* _internal_mutable_series_uid();
  public:

  // string image_uid = 4;
  void clear_image_uid();
  const std::string& image_uid() const;
  void set_image_uid(const std::string& value);
  void set_image_uid(std::string&& value);
  void set_image_uid(const char* value);
  void set_image_uid(const char* value, size_t size);
  std::string* mutable_image_uid();
  std::string* release_image_uid();
  void set_allocated_image_uid(std::string* image_uid);
  private:
  const std::string& _internal_image_uid() const;
  void _internal_set_image_uid(const std::string& value);
  std::string* _internal_mutable_image_uid();
  public:

  // .pyosirix.Color color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::pyosirix::Color& color() const;
  ::pyosirix::Color* release_color();
  ::pyosirix::Color* mutable_color();
  void set_allocated_color(::pyosirix::Color* color);
  private:
  const ::pyosirix::Color& _internal_color() const;
  ::pyosirix::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::pyosirix::Color* color);
  ::pyosirix::Color* unsafe_arena_release_color();

  // .pyosirix.Point centre = 9;
  bool has_centre() const;
  private:
  bool _internal_has_centre() const;
  public:
  void clear_centre();
  const ::pyosirix::Point& centre() const;
  ::pyosirix::Point* release_centre();
  ::pyosirix::Point* mutable_centre();
  void set_allocated_centre(::pyosirix::Point* centre);
  private:
  const ::pyosirix::Point& _internal_centre() const;
  ::pyosirix::Point* _internal_mutable_centre();
  public:
  void unsafe_arena_set_allocated_centre(
      ::pyosirix::Point* centre);
  ::pyosirix::Point* unsafe_arena_release_centre();

  // float opacity = 6;
  void clear_opacity();
  float opacity() const;
  void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // float thickness = 7;
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // uint32 selected = 8;
  void clear_selected();
  ::PROTOBUF_NAMESPACE_ID::uint32 selected() const;
  void set_selected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selected() const;
  void _internal_set_selected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ROI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uid_;
  ::pyosirix::Color* color_;
  ::pyosirix::Point* centre_;
  float opacity_;
  float thickness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class ROIListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ROIListResponse) */ {
 public:
  inline ROIListResponse() : ROIListResponse(nullptr) {}
  virtual ~ROIListResponse();

  ROIListResponse(const ROIListResponse& from);
  ROIListResponse(ROIListResponse&& from) noexcept
    : ROIListResponse() {
    *this = ::std::move(from);
  }

  inline ROIListResponse& operator=(const ROIListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIListResponse& operator=(ROIListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIListResponse* internal_default_instance() {
    return reinterpret_cast<const ROIListResponse*>(
               &_ROIListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ROIListResponse& a, ROIListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIListResponse* New() const final {
    return CreateMaybeMessage<ROIListResponse>(nullptr);
  }

  ROIListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIListResponse& from);
  void MergeFrom(const ROIListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ROIListResponse";
  }
  protected:
  explicit ROIListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .pyosirix.ROI roi_list = 2;
  int roi_list_size() const;
  private:
  int _internal_roi_list_size() const;
  public:
  void clear_roi_list();
  ::pyosirix::ROI* mutable_roi_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROI >*
      mutable_roi_list();
  private:
  const ::pyosirix::ROI& _internal_roi_list(int index) const;
  ::pyosirix::ROI* _internal_add_roi_list();
  public:
  const ::pyosirix::ROI& roi_list(int index) const;
  ::pyosirix::ROI* add_roi_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROI >&
      roi_list() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ROIListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROI > roi_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ROIListRequest

// string id = 1;
inline void ROIListRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROIListRequest::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIListRequest.id)
  return _internal_id();
}
inline void ROIListRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIListRequest.id)
}
inline std::string* ROIListRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIListRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ROIListRequest::_internal_id() const {
  return id_.Get();
}
inline void ROIListRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROIListRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROIListRequest.id)
}
inline void ROIListRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROIListRequest.id)
}
inline void ROIListRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROIListRequest.id)
}
inline std::string* ROIListRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROIListRequest::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIListRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIListRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIListRequest.id)
}

// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:pyosirix.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pyosirix.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:pyosirix.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pyosirix.Point.y)
}

// float z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline float Point::_internal_z() const {
  return z_;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:pyosirix.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pyosirix.Point.z)
}

// -------------------------------------------------------------------

// Color

// uint32 r = 1;
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void Color::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.r)
}

// uint32 g = 2;
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void Color::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.g)
}

// uint32 b = 3;
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void Color::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.b)
}

// -------------------------------------------------------------------

// ROI

// string id = 1;
inline void ROI::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROI::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.id)
  return _internal_id();
}
inline void ROI::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.id)
}
inline std::string* ROI::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.id)
  return _internal_mutable_id();
}
inline const std::string& ROI::_internal_id() const {
  return id_.Get();
}
inline void ROI::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROI::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROI.id)
}
inline void ROI::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROI.id)
}
inline void ROI::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROI.id)
}
inline std::string* ROI::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROI::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROI::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.id)
}

// string name = 2;
inline void ROI::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROI::name() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.name)
  return _internal_name();
}
inline void ROI::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.name)
}
inline std::string* ROI::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.name)
  return _internal_mutable_name();
}
inline const std::string& ROI::_internal_name() const {
  return name_.Get();
}
inline void ROI::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROI::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROI.name)
}
inline void ROI::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROI.name)
}
inline void ROI::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROI.name)
}
inline std::string* ROI::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROI::release_name() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROI::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.name)
}

// string series_uid = 3;
inline void ROI::clear_series_uid() {
  series_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROI::series_uid() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.series_uid)
  return _internal_series_uid();
}
inline void ROI::set_series_uid(const std::string& value) {
  _internal_set_series_uid(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.series_uid)
}
inline std::string* ROI::mutable_series_uid() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.series_uid)
  return _internal_mutable_series_uid();
}
inline const std::string& ROI::_internal_series_uid() const {
  return series_uid_.Get();
}
inline void ROI::_internal_set_series_uid(const std::string& value) {
  
  series_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROI::set_series_uid(std::string&& value) {
  
  series_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROI.series_uid)
}
inline void ROI::set_series_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  series_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROI.series_uid)
}
inline void ROI::set_series_uid(const char* value,
    size_t size) {
  
  series_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROI.series_uid)
}
inline std::string* ROI::_internal_mutable_series_uid() {
  
  return series_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROI::release_series_uid() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.series_uid)
  return series_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROI::set_allocated_series_uid(std::string* series_uid) {
  if (series_uid != nullptr) {
    
  } else {
    
  }
  series_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.series_uid)
}

// string image_uid = 4;
inline void ROI::clear_image_uid() {
  image_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROI::image_uid() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.image_uid)
  return _internal_image_uid();
}
inline void ROI::set_image_uid(const std::string& value) {
  _internal_set_image_uid(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.image_uid)
}
inline std::string* ROI::mutable_image_uid() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.image_uid)
  return _internal_mutable_image_uid();
}
inline const std::string& ROI::_internal_image_uid() const {
  return image_uid_.Get();
}
inline void ROI::_internal_set_image_uid(const std::string& value) {
  
  image_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROI::set_image_uid(std::string&& value) {
  
  image_uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROI.image_uid)
}
inline void ROI::set_image_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROI.image_uid)
}
inline void ROI::set_image_uid(const char* value,
    size_t size) {
  
  image_uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROI.image_uid)
}
inline std::string* ROI::_internal_mutable_image_uid() {
  
  return image_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROI::release_image_uid() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.image_uid)
  return image_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROI::set_allocated_image_uid(std::string* image_uid) {
  if (image_uid != nullptr) {
    
  } else {
    
  }
  image_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.image_uid)
}

// .pyosirix.Color color = 5;
inline bool ROI::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool ROI::has_color() const {
  return _internal_has_color();
}
inline void ROI::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::pyosirix::Color& ROI::_internal_color() const {
  const ::pyosirix::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pyosirix::Color*>(
      &::pyosirix::_Color_default_instance_);
}
inline const ::pyosirix::Color& ROI::color() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.color)
  return _internal_color();
}
inline void ROI::unsafe_arena_set_allocated_color(
    ::pyosirix::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pyosirix.ROI.color)
}
inline ::pyosirix::Color* ROI::release_color() {
  
  ::pyosirix::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pyosirix::Color* ROI::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.color)
  
  ::pyosirix::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::pyosirix::Color* ROI::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::pyosirix::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::pyosirix::Color* ROI::mutable_color() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.color)
  return _internal_mutable_color();
}
inline void ROI::set_allocated_color(::pyosirix::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.color)
}

// float opacity = 6;
inline void ROI::clear_opacity() {
  opacity_ = 0;
}
inline float ROI::_internal_opacity() const {
  return opacity_;
}
inline float ROI::opacity() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.opacity)
  return _internal_opacity();
}
inline void ROI::_internal_set_opacity(float value) {
  
  opacity_ = value;
}
inline void ROI::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.opacity)
}

// float thickness = 7;
inline void ROI::clear_thickness() {
  thickness_ = 0;
}
inline float ROI::_internal_thickness() const {
  return thickness_;
}
inline float ROI::thickness() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.thickness)
  return _internal_thickness();
}
inline void ROI::_internal_set_thickness(float value) {
  
  thickness_ = value;
}
inline void ROI::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.thickness)
}

// uint32 selected = 8;
inline void ROI::clear_selected() {
  selected_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROI::_internal_selected() const {
  return selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ROI::selected() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.selected)
  return _internal_selected();
}
inline void ROI::_internal_set_selected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  selected_ = value;
}
inline void ROI::set_selected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selected(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROI.selected)
}

// .pyosirix.Point centre = 9;
inline bool ROI::_internal_has_centre() const {
  return this != internal_default_instance() && centre_ != nullptr;
}
inline bool ROI::has_centre() const {
  return _internal_has_centre();
}
inline void ROI::clear_centre() {
  if (GetArena() == nullptr && centre_ != nullptr) {
    delete centre_;
  }
  centre_ = nullptr;
}
inline const ::pyosirix::Point& ROI::_internal_centre() const {
  const ::pyosirix::Point* p = centre_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pyosirix::Point*>(
      &::pyosirix::_Point_default_instance_);
}
inline const ::pyosirix::Point& ROI::centre() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.centre)
  return _internal_centre();
}
inline void ROI::unsafe_arena_set_allocated_centre(
    ::pyosirix::Point* centre) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centre_);
  }
  centre_ = centre;
  if (centre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pyosirix.ROI.centre)
}
inline ::pyosirix::Point* ROI::release_centre() {
  
  ::pyosirix::Point* temp = centre_;
  centre_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pyosirix::Point* ROI::unsafe_arena_release_centre() {
  // @@protoc_insertion_point(field_release:pyosirix.ROI.centre)
  
  ::pyosirix::Point* temp = centre_;
  centre_ = nullptr;
  return temp;
}
inline ::pyosirix::Point* ROI::_internal_mutable_centre() {
  
  if (centre_ == nullptr) {
    auto* p = CreateMaybeMessage<::pyosirix::Point>(GetArena());
    centre_ = p;
  }
  return centre_;
}
inline ::pyosirix::Point* ROI::mutable_centre() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.centre)
  return _internal_mutable_centre();
}
inline void ROI::set_allocated_centre(::pyosirix::Point* centre) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete centre_;
  }
  if (centre) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(centre);
    if (message_arena != submessage_arena) {
      centre = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centre, submessage_arena);
    }
    
  } else {
    
  }
  centre_ = centre;
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROI.centre)
}

// repeated .pyosirix.Point points = 10;
inline int ROI::_internal_points_size() const {
  return points_.size();
}
inline int ROI::points_size() const {
  return _internal_points_size();
}
inline void ROI::clear_points() {
  points_.Clear();
}
inline ::pyosirix::Point* ROI::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROI.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >*
ROI::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ROI.points)
  return &points_;
}
inline const ::pyosirix::Point& ROI::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::pyosirix::Point& ROI::points(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ROI.points)
  return _internal_points(index);
}
inline ::pyosirix::Point* ROI::_internal_add_points() {
  return points_.Add();
}
inline ::pyosirix::Point* ROI::add_points() {
  // @@protoc_insertion_point(field_add:pyosirix.ROI.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >&
ROI::points() const {
  // @@protoc_insertion_point(field_list:pyosirix.ROI.points)
  return points_;
}

// -------------------------------------------------------------------

// ROIListResponse

// string id = 1;
inline void ROIListResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROIListResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIListResponse.id)
  return _internal_id();
}
inline void ROIListResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIListResponse.id)
}
inline std::string* ROIListResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIListResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ROIListResponse::_internal_id() const {
  return id_.Get();
}
inline void ROIListResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROIListResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROIListResponse.id)
}
inline void ROIListResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROIListResponse.id)
}
inline void ROIListResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROIListResponse.id)
}
inline std::string* ROIListResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROIListResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIListResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIListResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIListResponse.id)
}

// repeated .pyosirix.ROI roi_list = 2;
inline int ROIListResponse::_internal_roi_list_size() const {
  return roi_list_.size();
}
inline int ROIListResponse::roi_list_size() const {
  return _internal_roi_list_size();
}
inline void ROIListResponse::clear_roi_list() {
  roi_list_.Clear();
}
inline ::pyosirix::ROI* ROIListResponse::mutable_roi_list(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIListResponse.roi_list)
  return roi_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROI >*
ROIListResponse::mutable_roi_list() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ROIListResponse.roi_list)
  return &roi_list_;
}
inline const ::pyosirix::ROI& ROIListResponse::_internal_roi_list(int index) const {
  return roi_list_.Get(index);
}
inline const ::pyosirix::ROI& ROIListResponse::roi_list(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIListResponse.roi_list)
  return _internal_roi_list(index);
}
inline ::pyosirix::ROI* ROIListResponse::_internal_add_roi_list() {
  return roi_list_.Add();
}
inline ::pyosirix::ROI* ROIListResponse::add_roi_list() {
  // @@protoc_insertion_point(field_add:pyosirix.ROIListResponse.roi_list)
  return _internal_add_roi_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROI >&
ROIListResponse::roi_list() const {
  // @@protoc_insertion_point(field_list:pyosirix.ROIListResponse.roi_list)
  return roi_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pyosirix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_roi_2eproto
