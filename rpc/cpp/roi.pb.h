// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_roi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_roi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_roi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_roi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_roi_2eproto;
namespace pyosirix {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class ROIRequest;
class ROIRequestDefaultTypeInternal;
extern ROIRequestDefaultTypeInternal _ROIRequest_default_instance_;
class ROIResponse;
class ROIResponseDefaultTypeInternal;
extern ROIResponseDefaultTypeInternal _ROIResponse_default_instance_;
class SliceROIResponse;
class SliceROIResponseDefaultTypeInternal;
extern SliceROIResponseDefaultTypeInternal _SliceROIResponse_default_instance_;
class StackROIResponse;
class StackROIResponseDefaultTypeInternal;
extern StackROIResponseDefaultTypeInternal _StackROIResponse_default_instance_;
}  // namespace pyosirix
PROTOBUF_NAMESPACE_OPEN
template<> ::pyosirix::Color* Arena::CreateMaybeMessage<::pyosirix::Color>(Arena*);
template<> ::pyosirix::Point* Arena::CreateMaybeMessage<::pyosirix::Point>(Arena*);
template<> ::pyosirix::ROIRequest* Arena::CreateMaybeMessage<::pyosirix::ROIRequest>(Arena*);
template<> ::pyosirix::ROIResponse* Arena::CreateMaybeMessage<::pyosirix::ROIResponse>(Arena*);
template<> ::pyosirix::SliceROIResponse* Arena::CreateMaybeMessage<::pyosirix::SliceROIResponse>(Arena*);
template<> ::pyosirix::StackROIResponse* Arena::CreateMaybeMessage<::pyosirix::StackROIResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pyosirix {

// ===================================================================

class ROIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ROIRequest) */ {
 public:
  inline ROIRequest() : ROIRequest(nullptr) {}
  virtual ~ROIRequest();

  ROIRequest(const ROIRequest& from);
  ROIRequest(ROIRequest&& from) noexcept
    : ROIRequest() {
    *this = ::std::move(from);
  }

  inline ROIRequest& operator=(const ROIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIRequest& operator=(ROIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIRequest* internal_default_instance() {
    return reinterpret_cast<const ROIRequest*>(
               &_ROIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ROIRequest& a, ROIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIRequest* New() const final {
    return CreateMaybeMessage<ROIRequest>(nullptr);
  }

  ROIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIRequest& from);
  void MergeFrom(const ROIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ROIRequest";
  }
  protected:
  explicit ROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ROIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class ROIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.ROIResponse) */ {
 public:
  inline ROIResponse() : ROIResponse(nullptr) {}
  virtual ~ROIResponse();

  ROIResponse(const ROIResponse& from);
  ROIResponse(ROIResponse&& from) noexcept
    : ROIResponse() {
    *this = ::std::move(from);
  }

  inline ROIResponse& operator=(const ROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIResponse& operator=(ROIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIResponse* internal_default_instance() {
    return reinterpret_cast<const ROIResponse*>(
               &_ROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ROIResponse& a, ROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIResponse* New() const final {
    return CreateMaybeMessage<ROIResponse>(nullptr);
  }

  ROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIResponse& from);
  void MergeFrom(const ROIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.ROIResponse";
  }
  protected:
  explicit ROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kColorFieldNumber = 3,
    kOpacityFieldNumber = 4,
    kThicknessFieldNumber = 5,
  };
  // repeated .pyosirix.Point points = 6;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::pyosirix::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >*
      mutable_points();
  private:
  const ::pyosirix::Point& _internal_points(int index) const;
  ::pyosirix::Point* _internal_add_points();
  public:
  const ::pyosirix::Point& points(int index) const;
  ::pyosirix::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >&
      points() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pyosirix.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::pyosirix::Color& color() const;
  ::pyosirix::Color* release_color();
  ::pyosirix::Color* mutable_color();
  void set_allocated_color(::pyosirix::Color* color);
  private:
  const ::pyosirix::Color& _internal_color() const;
  ::pyosirix::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::pyosirix::Color* color);
  ::pyosirix::Color* unsafe_arena_release_color();

  // float opacity = 4;
  void clear_opacity();
  float opacity() const;
  void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // float thickness = 5;
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.ROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pyosirix::Color* color_;
  float opacity_;
  float thickness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class SliceROIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.SliceROIResponse) */ {
 public:
  inline SliceROIResponse() : SliceROIResponse(nullptr) {}
  virtual ~SliceROIResponse();

  SliceROIResponse(const SliceROIResponse& from);
  SliceROIResponse(SliceROIResponse&& from) noexcept
    : SliceROIResponse() {
    *this = ::std::move(from);
  }

  inline SliceROIResponse& operator=(const SliceROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceROIResponse& operator=(SliceROIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceROIResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceROIResponse* internal_default_instance() {
    return reinterpret_cast<const SliceROIResponse*>(
               &_SliceROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SliceROIResponse& a, SliceROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceROIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceROIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceROIResponse* New() const final {
    return CreateMaybeMessage<SliceROIResponse>(nullptr);
  }

  SliceROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceROIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceROIResponse& from);
  void MergeFrom(const SliceROIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceROIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.SliceROIResponse";
  }
  protected:
  explicit SliceROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedFieldNumber = 2,
    kRoisFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated uint32 selected = 2;
  int selected_size() const;
  private:
  int _internal_selected_size() const;
  public:
  void clear_selected();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selected(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_selected() const;
  void _internal_add_selected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_selected();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 selected(int index) const;
  void set_selected(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_selected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      selected() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_selected();

  // repeated .pyosirix.ROIResponse rois = 3;
  int rois_size() const;
  private:
  int _internal_rois_size() const;
  public:
  void clear_rois();
  ::pyosirix::ROIResponse* mutable_rois(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROIResponse >*
      mutable_rois();
  private:
  const ::pyosirix::ROIResponse& _internal_rois(int index) const;
  ::pyosirix::ROIResponse* _internal_add_rois();
  public:
  const ::pyosirix::ROIResponse& rois(int index) const;
  ::pyosirix::ROIResponse* add_rois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROIResponse >&
      rois() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.SliceROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > selected_;
  mutable std::atomic<int> _selected_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROIResponse > rois_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// -------------------------------------------------------------------

class StackROIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pyosirix.StackROIResponse) */ {
 public:
  inline StackROIResponse() : StackROIResponse(nullptr) {}
  virtual ~StackROIResponse();

  StackROIResponse(const StackROIResponse& from);
  StackROIResponse(StackROIResponse&& from) noexcept
    : StackROIResponse() {
    *this = ::std::move(from);
  }

  inline StackROIResponse& operator=(const StackROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackROIResponse& operator=(StackROIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackROIResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackROIResponse* internal_default_instance() {
    return reinterpret_cast<const StackROIResponse*>(
               &_StackROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StackROIResponse& a, StackROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StackROIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackROIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackROIResponse* New() const final {
    return CreateMaybeMessage<StackROIResponse>(nullptr);
  }

  StackROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackROIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackROIResponse& from);
  void MergeFrom(const StackROIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackROIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pyosirix.StackROIResponse";
  }
  protected:
  explicit StackROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roi_2eproto);
    return ::descriptor_table_roi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .pyosirix.SliceROIResponse slices = 2;
  int slices_size() const;
  private:
  int _internal_slices_size() const;
  public:
  void clear_slices();
  ::pyosirix::SliceROIResponse* mutable_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::SliceROIResponse >*
      mutable_slices();
  private:
  const ::pyosirix::SliceROIResponse& _internal_slices(int index) const;
  ::pyosirix::SliceROIResponse* _internal_add_slices();
  public:
  const ::pyosirix::SliceROIResponse& slices(int index) const;
  ::pyosirix::SliceROIResponse* add_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::SliceROIResponse >&
      slices() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pyosirix.StackROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::SliceROIResponse > slices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ROIRequest

// string id = 1;
inline void ROIRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROIRequest::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIRequest.id)
  return _internal_id();
}
inline void ROIRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIRequest.id)
}
inline std::string* ROIRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ROIRequest::_internal_id() const {
  return id_.Get();
}
inline void ROIRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROIRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROIRequest.id)
}
inline void ROIRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROIRequest.id)
}
inline void ROIRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROIRequest.id)
}
inline std::string* ROIRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROIRequest::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIRequest.id)
}

// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:pyosirix.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pyosirix.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:pyosirix.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pyosirix.Point.y)
}

// -------------------------------------------------------------------

// Color

// uint32 r = 1;
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void Color::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.r)
}

// uint32 g = 2;
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void Color::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.g)
}

// uint32 b = 3;
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:pyosirix.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void Color::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:pyosirix.Color.b)
}

// -------------------------------------------------------------------

// ROIResponse

// string id = 1;
inline void ROIResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROIResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.id)
  return _internal_id();
}
inline void ROIResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIResponse.id)
}
inline std::string* ROIResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIResponse.id)
  return _internal_mutable_id();
}
inline const std::string& ROIResponse::_internal_id() const {
  return id_.Get();
}
inline void ROIResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROIResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROIResponse.id)
}
inline void ROIResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROIResponse.id)
}
inline void ROIResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROIResponse.id)
}
inline std::string* ROIResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROIResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIResponse.id)
}

// string name = 2;
inline void ROIResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ROIResponse::name() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.name)
  return _internal_name();
}
inline void ROIResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIResponse.name)
}
inline std::string* ROIResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIResponse.name)
  return _internal_mutable_name();
}
inline const std::string& ROIResponse::_internal_name() const {
  return name_.Get();
}
inline void ROIResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ROIResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.ROIResponse.name)
}
inline void ROIResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.ROIResponse.name)
}
inline void ROIResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.ROIResponse.name)
}
inline std::string* ROIResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ROIResponse::release_name() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIResponse.name)
}

// .pyosirix.Color color = 3;
inline bool ROIResponse::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool ROIResponse::has_color() const {
  return _internal_has_color();
}
inline void ROIResponse::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::pyosirix::Color& ROIResponse::_internal_color() const {
  const ::pyosirix::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pyosirix::Color*>(
      &::pyosirix::_Color_default_instance_);
}
inline const ::pyosirix::Color& ROIResponse::color() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.color)
  return _internal_color();
}
inline void ROIResponse::unsafe_arena_set_allocated_color(
    ::pyosirix::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pyosirix.ROIResponse.color)
}
inline ::pyosirix::Color* ROIResponse::release_color() {
  
  ::pyosirix::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pyosirix::Color* ROIResponse::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:pyosirix.ROIResponse.color)
  
  ::pyosirix::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::pyosirix::Color* ROIResponse::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::pyosirix::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::pyosirix::Color* ROIResponse::mutable_color() {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIResponse.color)
  return _internal_mutable_color();
}
inline void ROIResponse::set_allocated_color(::pyosirix::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:pyosirix.ROIResponse.color)
}

// float opacity = 4;
inline void ROIResponse::clear_opacity() {
  opacity_ = 0;
}
inline float ROIResponse::_internal_opacity() const {
  return opacity_;
}
inline float ROIResponse::opacity() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.opacity)
  return _internal_opacity();
}
inline void ROIResponse::_internal_set_opacity(float value) {
  
  opacity_ = value;
}
inline void ROIResponse::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIResponse.opacity)
}

// float thickness = 5;
inline void ROIResponse::clear_thickness() {
  thickness_ = 0;
}
inline float ROIResponse::_internal_thickness() const {
  return thickness_;
}
inline float ROIResponse::thickness() const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.thickness)
  return _internal_thickness();
}
inline void ROIResponse::_internal_set_thickness(float value) {
  
  thickness_ = value;
}
inline void ROIResponse::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:pyosirix.ROIResponse.thickness)
}

// repeated .pyosirix.Point points = 6;
inline int ROIResponse::_internal_points_size() const {
  return points_.size();
}
inline int ROIResponse::points_size() const {
  return _internal_points_size();
}
inline void ROIResponse::clear_points() {
  points_.Clear();
}
inline ::pyosirix::Point* ROIResponse::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.ROIResponse.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >*
ROIResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.ROIResponse.points)
  return &points_;
}
inline const ::pyosirix::Point& ROIResponse::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::pyosirix::Point& ROIResponse::points(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.ROIResponse.points)
  return _internal_points(index);
}
inline ::pyosirix::Point* ROIResponse::_internal_add_points() {
  return points_.Add();
}
inline ::pyosirix::Point* ROIResponse::add_points() {
  // @@protoc_insertion_point(field_add:pyosirix.ROIResponse.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::Point >&
ROIResponse::points() const {
  // @@protoc_insertion_point(field_list:pyosirix.ROIResponse.points)
  return points_;
}

// -------------------------------------------------------------------

// SliceROIResponse

// string id = 1;
inline void SliceROIResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SliceROIResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.SliceROIResponse.id)
  return _internal_id();
}
inline void SliceROIResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.SliceROIResponse.id)
}
inline std::string* SliceROIResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.SliceROIResponse.id)
  return _internal_mutable_id();
}
inline const std::string& SliceROIResponse::_internal_id() const {
  return id_.Get();
}
inline void SliceROIResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SliceROIResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.SliceROIResponse.id)
}
inline void SliceROIResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.SliceROIResponse.id)
}
inline void SliceROIResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.SliceROIResponse.id)
}
inline std::string* SliceROIResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SliceROIResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.SliceROIResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SliceROIResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.SliceROIResponse.id)
}

// repeated uint32 selected = 2;
inline int SliceROIResponse::_internal_selected_size() const {
  return selected_.size();
}
inline int SliceROIResponse::selected_size() const {
  return _internal_selected_size();
}
inline void SliceROIResponse::clear_selected() {
  selected_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceROIResponse::_internal_selected(int index) const {
  return selected_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SliceROIResponse::selected(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.SliceROIResponse.selected)
  return _internal_selected(index);
}
inline void SliceROIResponse::set_selected(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_.Set(index, value);
  // @@protoc_insertion_point(field_set:pyosirix.SliceROIResponse.selected)
}
inline void SliceROIResponse::_internal_add_selected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_.Add(value);
}
inline void SliceROIResponse::add_selected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_selected(value);
  // @@protoc_insertion_point(field_add:pyosirix.SliceROIResponse.selected)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SliceROIResponse::_internal_selected() const {
  return selected_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SliceROIResponse::selected() const {
  // @@protoc_insertion_point(field_list:pyosirix.SliceROIResponse.selected)
  return _internal_selected();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SliceROIResponse::_internal_mutable_selected() {
  return &selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SliceROIResponse::mutable_selected() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.SliceROIResponse.selected)
  return _internal_mutable_selected();
}

// repeated .pyosirix.ROIResponse rois = 3;
inline int SliceROIResponse::_internal_rois_size() const {
  return rois_.size();
}
inline int SliceROIResponse::rois_size() const {
  return _internal_rois_size();
}
inline void SliceROIResponse::clear_rois() {
  rois_.Clear();
}
inline ::pyosirix::ROIResponse* SliceROIResponse::mutable_rois(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.SliceROIResponse.rois)
  return rois_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROIResponse >*
SliceROIResponse::mutable_rois() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.SliceROIResponse.rois)
  return &rois_;
}
inline const ::pyosirix::ROIResponse& SliceROIResponse::_internal_rois(int index) const {
  return rois_.Get(index);
}
inline const ::pyosirix::ROIResponse& SliceROIResponse::rois(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.SliceROIResponse.rois)
  return _internal_rois(index);
}
inline ::pyosirix::ROIResponse* SliceROIResponse::_internal_add_rois() {
  return rois_.Add();
}
inline ::pyosirix::ROIResponse* SliceROIResponse::add_rois() {
  // @@protoc_insertion_point(field_add:pyosirix.SliceROIResponse.rois)
  return _internal_add_rois();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::ROIResponse >&
SliceROIResponse::rois() const {
  // @@protoc_insertion_point(field_list:pyosirix.SliceROIResponse.rois)
  return rois_;
}

// -------------------------------------------------------------------

// StackROIResponse

// string id = 1;
inline void StackROIResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StackROIResponse::id() const {
  // @@protoc_insertion_point(field_get:pyosirix.StackROIResponse.id)
  return _internal_id();
}
inline void StackROIResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pyosirix.StackROIResponse.id)
}
inline std::string* StackROIResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pyosirix.StackROIResponse.id)
  return _internal_mutable_id();
}
inline const std::string& StackROIResponse::_internal_id() const {
  return id_.Get();
}
inline void StackROIResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StackROIResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pyosirix.StackROIResponse.id)
}
inline void StackROIResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pyosirix.StackROIResponse.id)
}
inline void StackROIResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pyosirix.StackROIResponse.id)
}
inline std::string* StackROIResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StackROIResponse::release_id() {
  // @@protoc_insertion_point(field_release:pyosirix.StackROIResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StackROIResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pyosirix.StackROIResponse.id)
}

// repeated .pyosirix.SliceROIResponse slices = 2;
inline int StackROIResponse::_internal_slices_size() const {
  return slices_.size();
}
inline int StackROIResponse::slices_size() const {
  return _internal_slices_size();
}
inline void StackROIResponse::clear_slices() {
  slices_.Clear();
}
inline ::pyosirix::SliceROIResponse* StackROIResponse::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:pyosirix.StackROIResponse.slices)
  return slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::SliceROIResponse >*
StackROIResponse::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:pyosirix.StackROIResponse.slices)
  return &slices_;
}
inline const ::pyosirix::SliceROIResponse& StackROIResponse::_internal_slices(int index) const {
  return slices_.Get(index);
}
inline const ::pyosirix::SliceROIResponse& StackROIResponse::slices(int index) const {
  // @@protoc_insertion_point(field_get:pyosirix.StackROIResponse.slices)
  return _internal_slices(index);
}
inline ::pyosirix::SliceROIResponse* StackROIResponse::_internal_add_slices() {
  return slices_.Add();
}
inline ::pyosirix::SliceROIResponse* StackROIResponse::add_slices() {
  // @@protoc_insertion_point(field_add:pyosirix.StackROIResponse.slices)
  return _internal_add_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pyosirix::SliceROIResponse >&
StackROIResponse::slices() const {
  // @@protoc_insertion_point(field_list:pyosirix.StackROIResponse.slices)
  return slices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pyosirix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_roi_2eproto
